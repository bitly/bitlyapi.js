/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TextBlockStyle } from './TextBlockStyle';
import {
    TextBlockStyleFromJSON,
    TextBlockStyleFromJSONTyped,
    TextBlockStyleToJSON,
    TextBlockStyleToJSONTyped,
} from './TextBlockStyle';

/**
 * 
 * @export
 * @interface TextBlockAppearanceResponse
 */
export interface TextBlockAppearanceResponse {
    /**
     * 
     * @type {string}
     * @memberof TextBlockAppearanceResponse
     */
    background_color?: string;
    /**
     * 
     * @type {string}
     * @memberof TextBlockAppearanceResponse
     */
    text_color?: string;
    /**
     * 
     * @type {string}
     * @memberof TextBlockAppearanceResponse
     */
    alignment?: TextBlockAppearanceResponseAlignmentEnum;
    /**
     * 
     * @type {TextBlockStyle}
     * @memberof TextBlockAppearanceResponse
     */
    text_block_style?: TextBlockStyle;
    /**
     * 
     * @type {string}
     * @memberof TextBlockAppearanceResponse
     */
    font_size?: TextBlockAppearanceResponseFontSizeEnum;
    /**
     * 
     * @type {number}
     * @memberof TextBlockAppearanceResponse
     */
    shape?: number;
    /**
     * 
     * @type {number}
     * @memberof TextBlockAppearanceResponse
     */
    shadow?: number;
}

/**
* @export
* @enum {string}
*/
export enum TextBlockAppearanceResponseAlignmentEnum {
    left = 'left',
    center = 'center',
    right = 'right',
    justified = 'justified'
}
/**
* @export
* @enum {string}
*/
export enum TextBlockAppearanceResponseFontSizeEnum {
    small = 'small',
    medium = 'medium',
    large = 'large',
    extra_large = 'extra_large'
}


/**
 * Check if a given object implements the TextBlockAppearanceResponse interface.
 */
export function instanceOfTextBlockAppearanceResponse(value: object): value is TextBlockAppearanceResponse {
    return true;
}

export function TextBlockAppearanceResponseFromJSON(json: any): TextBlockAppearanceResponse {
    return TextBlockAppearanceResponseFromJSONTyped(json, false);
}

export function TextBlockAppearanceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextBlockAppearanceResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'background_color': json['background_color'] == null ? undefined : json['background_color'],
        'text_color': json['text_color'] == null ? undefined : json['text_color'],
        'alignment': json['alignment'] == null ? undefined : json['alignment'],
        'text_block_style': json['text_block_style'] == null ? undefined : TextBlockStyleFromJSON(json['text_block_style']),
        'font_size': json['font_size'] == null ? undefined : json['font_size'],
        'shape': json['shape'] == null ? undefined : json['shape'],
        'shadow': json['shadow'] == null ? undefined : json['shadow'],
    };
}

export function TextBlockAppearanceResponseToJSON(json: any): TextBlockAppearanceResponse {
    return TextBlockAppearanceResponseToJSONTyped(json, false);
}

export function TextBlockAppearanceResponseToJSONTyped(value?: TextBlockAppearanceResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'background_color': value['background_color'],
        'text_color': value['text_color'],
        'alignment': value['alignment'],
        'text_block_style': TextBlockStyleToJSON(value['text_block_style']),
        'font_size': value['font_size'],
        'shape': value['shape'],
        'shadow': value['shadow'],
    };
}

