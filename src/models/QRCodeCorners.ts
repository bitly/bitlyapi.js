/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeCorner } from './QRCodeCorner';
import {
    QRCodeCornerFromJSON,
    QRCodeCornerFromJSONTyped,
    QRCodeCornerToJSON,
    QRCodeCornerToJSONTyped,
} from './QRCodeCorner';

/**
 * An object representing all three corners of the QR code. The corners corresponding to each property are: corner_1 = top left, corner_2 = top right, and corner_3 = bottom right
 * @export
 * @interface QRCodeCorners
 */
export interface QRCodeCorners {
    /**
     * 
     * @type {QRCodeCorner}
     * @memberof QRCodeCorners
     */
    corner_1?: QRCodeCorner;
    /**
     * 
     * @type {QRCodeCorner}
     * @memberof QRCodeCorners
     */
    corner_2?: QRCodeCorner;
    /**
     * 
     * @type {QRCodeCorner}
     * @memberof QRCodeCorners
     */
    corner_3?: QRCodeCorner;
}

/**
 * Check if a given object implements the QRCodeCorners interface.
 */
export function instanceOfQRCodeCorners(value: object): value is QRCodeCorners {
    return true;
}

export function QRCodeCornersFromJSON(json: any): QRCodeCorners {
    return QRCodeCornersFromJSONTyped(json, false);
}

export function QRCodeCornersFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeCorners {
    if (json == null) {
        return json;
    }
    return {
        
        'corner_1': json['corner_1'] == null ? undefined : QRCodeCornerFromJSON(json['corner_1']),
        'corner_2': json['corner_2'] == null ? undefined : QRCodeCornerFromJSON(json['corner_2']),
        'corner_3': json['corner_3'] == null ? undefined : QRCodeCornerFromJSON(json['corner_3']),
    };
}

export function QRCodeCornersToJSON(json: any): QRCodeCorners {
    return QRCodeCornersToJSONTyped(json, false);
}

export function QRCodeCornersToJSONTyped(value?: QRCodeCorners | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'corner_1': QRCodeCornerToJSON(value['corner_1']),
        'corner_2': QRCodeCornerToJSON(value['corner_2']),
        'corner_3': QRCodeCornerToJSON(value['corner_3']),
    };
}

