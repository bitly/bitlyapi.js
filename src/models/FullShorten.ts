/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Deeplink } from './Deeplink';
import {
    DeeplinkFromJSON,
    DeeplinkFromJSONTyped,
    DeeplinkToJSON,
    DeeplinkToJSONTyped,
} from './Deeplink';

/**
 * Either long_url (for new bitlinks) or bitlink_id (for adding keywords to existing bitlinks) must be provided, but not both.
 * @export
 * @interface FullShorten
 */
export interface FullShorten {
    /**
     * URL to be shortened. Required when creating new bitlinks. Cannot be used with bitlink_id.
     * @type {string}
     * @memberof FullShorten
     */
    long_url?: string;
    /**
     * 
     * @type {string}
     * @memberof FullShorten
     */
    domain?: string;
    /**
     * Always include a specific group and custom domain in your shorten calls.
     * @type {string}
     * @memberof FullShorten
     */
    group_guid?: string;
    /**
     * 
     * @type {string}
     * @memberof FullShorten
     */
    title?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FullShorten
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<Deeplink>}
     * @memberof FullShorten
     */
    deeplinks?: Array<Deeplink>;
    /**
     * 
     * @type {boolean}
     * @memberof FullShorten
     */
    force_new_link?: boolean;
    /**
     * Custom keyword for creating keyword overrides. If provided, creates an override at domain/keyword. Cannot use bit.ly domain.
     * @type {string}
     * @memberof FullShorten
     */
    keyword?: string;
    /**
     * Existing bitlink ID to add a keyword override to. Format: domain/hash. Cannot be used with long_url. Cannot use bit.ly domain.
     * @type {string}
     * @memberof FullShorten
     */
    bitlink_id?: string;
}

/**
 * Check if a given object implements the FullShorten interface.
 */
export function instanceOfFullShorten(value: object): value is FullShorten {
    return true;
}

export function FullShortenFromJSON(json: any): FullShorten {
    return FullShortenFromJSONTyped(json, false);
}

export function FullShortenFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullShorten {
    if (json == null) {
        return json;
    }
    return {
        
        'long_url': json['long_url'] == null ? undefined : json['long_url'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'group_guid': json['group_guid'] == null ? undefined : json['group_guid'],
        'title': json['title'] == null ? undefined : json['title'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'deeplinks': json['deeplinks'] == null ? undefined : ((json['deeplinks'] as Array<any>).map(DeeplinkFromJSON)),
        'force_new_link': json['force_new_link'] == null ? undefined : json['force_new_link'],
        'keyword': json['keyword'] == null ? undefined : json['keyword'],
        'bitlink_id': json['bitlink_id'] == null ? undefined : json['bitlink_id'],
    };
}

export function FullShortenToJSON(json: any): FullShorten {
    return FullShortenToJSONTyped(json, false);
}

export function FullShortenToJSONTyped(value?: FullShorten | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'long_url': value['long_url'],
        'domain': value['domain'],
        'group_guid': value['group_guid'],
        'title': value['title'],
        'tags': value['tags'],
        'deeplinks': value['deeplinks'] == null ? undefined : ((value['deeplinks'] as Array<any>).map(DeeplinkToJSON)),
        'force_new_link': value['force_new_link'],
        'keyword': value['keyword'],
        'bitlink_id': value['bitlink_id'],
    };
}

