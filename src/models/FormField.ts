/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormConfig } from './FormConfig';
import {
    FormConfigFromJSON,
    FormConfigFromJSONTyped,
    FormConfigToJSON,
    FormConfigToJSONTyped,
} from './FormConfig';

/**
 * 
 * @export
 * @interface FormField
 */
export interface FormField {
    /**
     * 
     * @type {string}
     * @memberof FormField
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FormField
     */
    field_type?: string;
    /**
     * 
     * @type {string}
     * @memberof FormField
     */
    label?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FormField
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FormField
     */
    response?: string;
    /**
     * 
     * @type {FormConfig}
     * @memberof FormField
     */
    config?: FormConfig;
}

/**
 * Check if a given object implements the FormField interface.
 */
export function instanceOfFormField(value: object): value is FormField {
    return true;
}

export function FormFieldFromJSON(json: any): FormField {
    return FormFieldFromJSONTyped(json, false);
}

export function FormFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormField {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'field_type': json['field_type'] == null ? undefined : json['field_type'],
        'label': json['label'] == null ? undefined : json['label'],
        'required': json['required'] == null ? undefined : json['required'],
        'response': json['response'] == null ? undefined : json['response'],
        'config': json['config'] == null ? undefined : json['config'],
    };
}

export function FormFieldToJSON(json: any): FormField {
    return FormFieldToJSONTyped(json, false);
}

export function FormFieldToJSONTyped(value?: FormField | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'field_type': value['field_type'],
        'label': value['label'],
        'required': value['required'],
        'response': value['response'],
        'config': value['config'],
    };
}

