/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CityBitlinkClicksMetric } from './CityBitlinkClicksMetric';
import {
    CityBitlinkClicksMetricFromJSON,
    CityBitlinkClicksMetricFromJSONTyped,
    CityBitlinkClicksMetricToJSON,
    CityBitlinkClicksMetricToJSONTyped,
} from './CityBitlinkClicksMetric';

/**
 * 
 * @export
 * @interface CityBitlinkClicksMetrics
 */
export interface CityBitlinkClicksMetrics {
    /**
     * 
     * @type {string}
     * @memberof CityBitlinkClicksMetrics
     */
    unit?: string;
    /**
     * 
     * @type {number}
     * @memberof CityBitlinkClicksMetrics
     */
    units?: number;
    /**
     * 
     * @type {string}
     * @memberof CityBitlinkClicksMetrics
     */
    facet?: CityBitlinkClicksMetricsFacetEnum;
    /**
     * 
     * @type {string}
     * @memberof CityBitlinkClicksMetrics
     */
    unit_reference?: string;
    /**
     * 
     * @type {Array<CityBitlinkClicksMetric>}
     * @memberof CityBitlinkClicksMetrics
     */
    metrics?: Array<CityBitlinkClicksMetric>;
    /**
     * 
     * @type {object}
     * @memberof CityBitlinkClicksMetrics
     */
    other_metrics?: object;
}

/**
* @export
* @enum {string}
*/
export enum CityBitlinkClicksMetricsFacetEnum {
    countries = 'countries',
    cities = 'cities',
    device_os = 'device_os',
    browsers = 'browsers'
}


/**
 * Check if a given object implements the CityBitlinkClicksMetrics interface.
 */
export function instanceOfCityBitlinkClicksMetrics(value: object): value is CityBitlinkClicksMetrics {
    return true;
}

export function CityBitlinkClicksMetricsFromJSON(json: any): CityBitlinkClicksMetrics {
    return CityBitlinkClicksMetricsFromJSONTyped(json, false);
}

export function CityBitlinkClicksMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CityBitlinkClicksMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        'unit': json['unit'] == null ? undefined : json['unit'],
        'units': json['units'] == null ? undefined : json['units'],
        'facet': json['facet'] == null ? undefined : json['facet'],
        'unit_reference': json['unit_reference'] == null ? undefined : json['unit_reference'],
        'metrics': json['metrics'] == null ? undefined : ((json['metrics'] as Array<any>).map(CityBitlinkClicksMetricFromJSON)),
        'other_metrics': json['other_metrics'] == null ? undefined : json['other_metrics'],
    };
}

export function CityBitlinkClicksMetricsToJSON(json: any): CityBitlinkClicksMetrics {
    return CityBitlinkClicksMetricsToJSONTyped(json, false);
}

export function CityBitlinkClicksMetricsToJSONTyped(value?: CityBitlinkClicksMetrics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'unit': value['unit'],
        'units': value['units'],
        'facet': value['facet'],
        'unit_reference': value['unit_reference'],
        'metrics': value['metrics'] == null ? undefined : ((value['metrics'] as Array<any>).map(CityBitlinkClicksMetricToJSON)),
        'other_metrics': value['other_metrics'],
    };
}

