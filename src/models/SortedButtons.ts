/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SortedButtonsPageViewsInner } from './SortedButtonsPageViewsInner';
import {
    SortedButtonsPageViewsInnerFromJSON,
    SortedButtonsPageViewsInnerFromJSONTyped,
    SortedButtonsPageViewsInnerToJSON,
    SortedButtonsPageViewsInnerToJSONTyped,
} from './SortedButtonsPageViewsInner';
import type { SortedButtonsButtonsInner } from './SortedButtonsButtonsInner';
import {
    SortedButtonsButtonsInnerFromJSON,
    SortedButtonsButtonsInnerFromJSONTyped,
    SortedButtonsButtonsInnerToJSON,
    SortedButtonsButtonsInnerToJSONTyped,
} from './SortedButtonsButtonsInner';
import type { ClickLink } from './ClickLink';
import {
    ClickLinkFromJSON,
    ClickLinkFromJSONTyped,
    ClickLinkToJSON,
    ClickLinkToJSONTyped,
} from './ClickLink';

/**
 * 
 * @export
 * @interface SortedButtons
 */
export interface SortedButtons {
    /**
     * 
     * @type {string}
     * @memberof SortedButtons
     */
    info?: string;
    /**
     * 
     * @type {Array<ClickLink>}
     * @memberof SortedButtons
     */
    sorted_buttons?: Array<ClickLink>;
    /**
     * 
     * @type {Array<SortedButtonsButtonsInner>}
     * @memberof SortedButtons
     */
    buttons?: Array<SortedButtonsButtonsInner>;
    /**
     * 
     * @type {Array<SortedButtonsPageViewsInner>}
     * @memberof SortedButtons
     */
    page_views?: Array<SortedButtonsPageViewsInner>;
}

/**
 * Check if a given object implements the SortedButtons interface.
 */
export function instanceOfSortedButtons(value: object): value is SortedButtons {
    return true;
}

export function SortedButtonsFromJSON(json: any): SortedButtons {
    return SortedButtonsFromJSONTyped(json, false);
}

export function SortedButtonsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SortedButtons {
    if (json == null) {
        return json;
    }
    return {
        
        'info': json['info'] == null ? undefined : json['info'],
        'sorted_buttons': json['sorted_buttons'] == null ? undefined : ((json['sorted_buttons'] as Array<any>).map(ClickLinkFromJSON)),
        'buttons': json['buttons'] == null ? undefined : ((json['buttons'] as Array<any>).map(SortedButtonsButtonsInnerFromJSON)),
        'page_views': json['page_views'] == null ? undefined : ((json['page_views'] as Array<any>).map(SortedButtonsPageViewsInnerFromJSON)),
    };
}

export function SortedButtonsToJSON(json: any): SortedButtons {
    return SortedButtonsToJSONTyped(json, false);
}

export function SortedButtonsToJSONTyped(value?: SortedButtons | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'info': value['info'],
        'sorted_buttons': value['sorted_buttons'] == null ? undefined : ((value['sorted_buttons'] as Array<any>).map(ClickLinkToJSON)),
        'buttons': value['buttons'] == null ? undefined : ((value['buttons'] as Array<any>).map(SortedButtonsButtonsInnerToJSON)),
        'page_views': value['page_views'] == null ? undefined : ((value['page_views'] as Array<any>).map(SortedButtonsPageViewsInnerToJSON)),
    };
}

