/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeLogoCrop } from './QRCodeLogoCrop';
import {
    QRCodeLogoCropFromJSON,
    QRCodeLogoCropFromJSONTyped,
    QRCodeLogoCropToJSON,
    QRCodeLogoCropToJSONTyped,
} from './QRCodeLogoCrop';

/**
 * 
 * @export
 * @interface QRCodeLogo
 */
export interface QRCodeLogo {
    /**
     * A GUID for an image uploaded to Bitly
     * @type {string}
     * @memberof QRCodeLogo
     */
    image_guid?: string;
    /**
     * The type of crop, either rectangular or circular, to be used on the logo
     * @type {string}
     * @memberof QRCodeLogo
     */
    crop_type?: QRCodeLogoCropTypeEnum;
    /**
     * 
     * @type {QRCodeLogoCrop}
     * @memberof QRCodeLogo
     */
    crop?: QRCodeLogoCrop;
}

/**
* @export
* @enum {string}
*/
export enum QRCodeLogoCropTypeEnum {
    rectangle = 'rectangle',
    circle = 'circle'
}


/**
 * Check if a given object implements the QRCodeLogo interface.
 */
export function instanceOfQRCodeLogo(value: object): value is QRCodeLogo {
    return true;
}

export function QRCodeLogoFromJSON(json: any): QRCodeLogo {
    return QRCodeLogoFromJSONTyped(json, false);
}

export function QRCodeLogoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeLogo {
    if (json == null) {
        return json;
    }
    return {
        
        'image_guid': json['image_guid'] == null ? undefined : json['image_guid'],
        'crop_type': json['crop_type'] == null ? undefined : json['crop_type'],
        'crop': json['crop'] == null ? undefined : QRCodeLogoCropFromJSON(json['crop']),
    };
}

export function QRCodeLogoToJSON(json: any): QRCodeLogo {
    return QRCodeLogoToJSONTyped(json, false);
}

export function QRCodeLogoToJSONTyped(value?: QRCodeLogo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'image_guid': value['image_guid'],
        'crop_type': value['crop_type'],
        'crop': QRCodeLogoCropToJSON(value['crop']),
    };
}

