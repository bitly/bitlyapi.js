/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountItem } from './CountItem';
import {
    CountItemFromJSON,
    CountItemFromJSONTyped,
    CountItemToJSON,
    CountItemToJSONTyped,
} from './CountItem';

/**
 * 
 * @export
 * @interface GroupBitlinksCount
 */
export interface GroupBitlinksCount {
    /**
     * 
     * @type {string}
     * @memberof GroupBitlinksCount
     */
    unit?: string;
    /**
     * 
     * @type {number}
     * @memberof GroupBitlinksCount
     */
    units?: number;
    /**
     * 
     * @type {string}
     * @memberof GroupBitlinksCount
     */
    unit_reference?: string;
    /**
     * 
     * @type {Array<CountItem>}
     * @memberof GroupBitlinksCount
     */
    data?: Array<CountItem>;
}

/**
 * Check if a given object implements the GroupBitlinksCount interface.
 */
export function instanceOfGroupBitlinksCount(value: object): value is GroupBitlinksCount {
    return true;
}

export function GroupBitlinksCountFromJSON(json: any): GroupBitlinksCount {
    return GroupBitlinksCountFromJSONTyped(json, false);
}

export function GroupBitlinksCountFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupBitlinksCount {
    if (json == null) {
        return json;
    }
    return {
        
        'unit': json['unit'] == null ? undefined : json['unit'],
        'units': json['units'] == null ? undefined : json['units'],
        'unit_reference': json['unit_reference'] == null ? undefined : json['unit_reference'],
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(CountItemFromJSON)),
    };
}

export function GroupBitlinksCountToJSON(json: any): GroupBitlinksCount {
    return GroupBitlinksCountToJSONTyped(json, false);
}

export function GroupBitlinksCountToJSONTyped(value?: GroupBitlinksCount | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'unit': value['unit'],
        'units': value['units'],
        'unit_reference': value['unit_reference'],
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(CountItemToJSON)),
    };
}

