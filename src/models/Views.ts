/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ViewMetric } from './ViewMetric';
import {
    ViewMetricFromJSON,
    ViewMetricFromJSONTyped,
    ViewMetricToJSON,
    ViewMetricToJSONTyped,
} from './ViewMetric';

/**
 * @deprecated LL-2507
 * @export
 * @interface Views
 */
export interface Views {
    /**
     * 
     * @type {Array<ViewMetric>}
     * @memberof Views
     */
    launchpad_views?: Array<ViewMetric>;
    /**
     * 
     * @type {number}
     * @memberof Views
     */
    units?: number;
    /**
     * 
     * @type {string}
     * @memberof Views
     */
    unit?: ViewsUnitEnum;
    /**
     * 
     * @type {string}
     * @memberof Views
     */
    unit_reference?: string;
    /**
     * 
     * @type {string}
     * @memberof Views
     */
    facet?: ViewsFacetEnum;
}

/**
* @export
* @enum {string}
*/
export enum ViewsUnitEnum {
    minute = 'minute',
    hour = 'hour',
    day = 'day',
    week = 'week',
    month = 'month'
}
/**
* @export
* @enum {string}
*/
export enum ViewsFacetEnum {
    views = 'views',
    countries = 'countries',
    referrers = 'referrers',
    devices = 'devices'
}


/**
 * Check if a given object implements the Views interface.
 */
export function instanceOfViews(value: object): value is Views {
    return true;
}

export function ViewsFromJSON(json: any): Views {
    return ViewsFromJSONTyped(json, false);
}

export function ViewsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Views {
    if (json == null) {
        return json;
    }
    return {
        
        'launchpad_views': json['launchpad_views'] == null ? undefined : ((json['launchpad_views'] as Array<any>).map(ViewMetricFromJSON)),
        'units': json['units'] == null ? undefined : json['units'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'unit_reference': json['unit_reference'] == null ? undefined : json['unit_reference'],
        'facet': json['facet'] == null ? undefined : json['facet'],
    };
}

export function ViewsToJSON(json: any): Views {
    return ViewsToJSONTyped(json, false);
}

export function ViewsToJSONTyped(value?: Views | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'launchpad_views': value['launchpad_views'] == null ? undefined : ((value['launchpad_views'] as Array<any>).map(ViewMetricToJSON)),
        'units': value['units'],
        'unit': value['unit'],
        'unit_reference': value['unit_reference'],
        'facet': value['facet'],
    };
}

