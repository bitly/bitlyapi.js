/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeTypeEnum } from './QRCodeTypeEnum';
import {
    QRCodeTypeEnumFromJSON,
    QRCodeTypeEnumFromJSONTyped,
    QRCodeTypeEnumToJSON,
    QRCodeTypeEnumToJSONTyped,
} from './QRCodeTypeEnum';

/**
 * 
 * @export
 * @interface QRCodeTypeItem
 */
export interface QRCodeTypeItem {
    /**
     * 
     * @type {QRCodeTypeEnum}
     * @memberof QRCodeTypeItem
     */
    id: QRCodeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof QRCodeTypeItem
     */
    name: string;
    /**
     * The QR code's thumbnail image data as a data uri. Can be svg, png, jpg. Only used in response bodies.
     * @type {string}
     * @memberof QRCodeTypeItem
     */
    thumbnail: string;
    /**
     * Determines whether the user has acccess to this field
     * @type {boolean}
     * @memberof QRCodeTypeItem
     */
    locked?: boolean;
}



/**
 * Check if a given object implements the QRCodeTypeItem interface.
 */
export function instanceOfQRCodeTypeItem(value: object): value is QRCodeTypeItem {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('thumbnail' in value) || value['thumbnail'] === undefined) return false;
    return true;
}

export function QRCodeTypeItemFromJSON(json: any): QRCodeTypeItem {
    return QRCodeTypeItemFromJSONTyped(json, false);
}

export function QRCodeTypeItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeTypeItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': QRCodeTypeEnumFromJSON(json['id']),
        'name': json['name'],
        'thumbnail': json['thumbnail'],
        'locked': json['locked'] == null ? undefined : json['locked'],
    };
}

export function QRCodeTypeItemToJSON(json: any): QRCodeTypeItem {
    return QRCodeTypeItemToJSONTyped(json, false);
}

export function QRCodeTypeItemToJSONTyped(value?: QRCodeTypeItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': QRCodeTypeEnumToJSON(value['id']),
        'name': value['name'],
        'thumbnail': value['thumbnail'],
        'locked': value['locked'],
    };
}

