/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FieldError } from './FieldError';
import {
    FieldErrorFromJSON,
    FieldErrorFromJSONTyped,
    FieldErrorToJSON,
    FieldErrorToJSONTyped,
} from './FieldError';

/**
 * UPGRADE_REQUIRED
 * @export
 * @interface UpgradeRequired
 */
export interface UpgradeRequired {
    /**
     * 
     * @type {string}
     * @memberof UpgradeRequired
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof UpgradeRequired
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpgradeRequired
     */
    resource?: string;
    /**
     * 
     * @type {Array<FieldError>}
     * @memberof UpgradeRequired
     */
    errors?: Array<FieldError>;
}

/**
 * Check if a given object implements the UpgradeRequired interface.
 */
export function instanceOfUpgradeRequired(value: object): value is UpgradeRequired {
    return true;
}

export function UpgradeRequiredFromJSON(json: any): UpgradeRequired {
    return UpgradeRequiredFromJSONTyped(json, false);
}

export function UpgradeRequiredFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpgradeRequired {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'] == null ? undefined : json['message'],
        'description': json['description'] == null ? undefined : json['description'],
        'resource': json['resource'] == null ? undefined : json['resource'],
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(FieldErrorFromJSON)),
    };
}

export function UpgradeRequiredToJSON(json: any): UpgradeRequired {
    return UpgradeRequiredToJSONTyped(json, false);
}

export function UpgradeRequiredToJSONTyped(value?: UpgradeRequired | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'description': value['description'],
        'resource': value['resource'],
        'errors': value['errors'] == null ? undefined : ((value['errors'] as Array<any>).map(FieldErrorToJSON)),
    };
}

