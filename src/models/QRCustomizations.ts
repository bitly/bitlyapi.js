/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QRCustomizations
 */
export interface QRCustomizations {
    /**
     * A color denoted in hexadecimal format ei. "1133ff"
     * @type {string}
     * @memberof QRCustomizations
     */
    color?: string;
    /**
     * Removes the Bitly logo from the center of the generated QR image
     * @type {boolean}
     * @memberof QRCustomizations
     */
    exclude_bitly_logo?: boolean;
    /**
     * Determines the image format of the returned QR code
     * @type {string}
     * @memberof QRCustomizations
     */
    image_format?: QRCustomizationsImageFormatEnum;
    /**
     * Logo must first be uploaded through Bitly's QR Code Modal located on the "All links" page. Once created, a call to "Retrieve a QR Code" with specified bitlink will return the auto-generated "logo_image_guid"
     * @type {string}
     * @memberof QRCustomizations
     */
    logo_image_guid?: string;
    /**
     * Determine whether to hide the QR code. Passing true will hide the QR code.
     * @type {boolean}
     * @memberof QRCustomizations
     */
    is_hidden?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum QRCustomizationsImageFormatEnum {
    png = 'png',
    svg = 'svg'
}


/**
 * Check if a given object implements the QRCustomizations interface.
 */
export function instanceOfQRCustomizations(value: object): value is QRCustomizations {
    return true;
}

export function QRCustomizationsFromJSON(json: any): QRCustomizations {
    return QRCustomizationsFromJSONTyped(json, false);
}

export function QRCustomizationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCustomizations {
    if (json == null) {
        return json;
    }
    return {
        
        'color': json['color'] == null ? undefined : json['color'],
        'exclude_bitly_logo': json['exclude_bitly_logo'] == null ? undefined : json['exclude_bitly_logo'],
        'image_format': json['image_format'] == null ? undefined : json['image_format'],
        'logo_image_guid': json['logo_image_guid'] == null ? undefined : json['logo_image_guid'],
        'is_hidden': json['is_hidden'] == null ? undefined : json['is_hidden'],
    };
}

export function QRCustomizationsToJSON(json: any): QRCustomizations {
    return QRCustomizationsToJSONTyped(json, false);
}

export function QRCustomizationsToJSONTyped(value?: QRCustomizations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'color': value['color'],
        'exclude_bitly_logo': value['exclude_bitly_logo'],
        'image_format': value['image_format'],
        'logo_image_guid': value['logo_image_guid'],
        'is_hidden': value['is_hidden'],
    };
}

