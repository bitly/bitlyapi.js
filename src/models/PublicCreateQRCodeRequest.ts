/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeCustomizationsPublic } from './QRCodeCustomizationsPublic';
import {
    QRCodeCustomizationsPublicFromJSON,
    QRCodeCustomizationsPublicFromJSONTyped,
    QRCodeCustomizationsPublicToJSON,
    QRCodeCustomizationsPublicToJSONTyped,
} from './QRCodeCustomizationsPublic';
import type { QRCodeDestination } from './QRCodeDestination';
import {
    QRCodeDestinationFromJSON,
    QRCodeDestinationFromJSONTyped,
    QRCodeDestinationToJSON,
    QRCodeDestinationToJSONTyped,
} from './QRCodeDestination';
import type { GS1Metadata } from './GS1Metadata';
import {
    GS1MetadataFromJSON,
    GS1MetadataFromJSONTyped,
    GS1MetadataToJSON,
    GS1MetadataToJSONTyped,
} from './GS1Metadata';

/**
 * Customization and content values for a QR code created through the public API
 * @export
 * @interface PublicCreateQRCodeRequest
 */
export interface PublicCreateQRCodeRequest {
    /**
     * The title of the QR Code
     * @type {string}
     * @memberof PublicCreateQRCodeRequest
     */
    title?: string;
    /**
     * Identify which group to place the QR Code.
     * @type {string}
     * @memberof PublicCreateQRCodeRequest
     */
    group_guid: string;
    /**
     * 
     * @type {QRCodeCustomizationsPublic}
     * @memberof PublicCreateQRCodeRequest
     */
    render_customizations?: QRCodeCustomizationsPublic;
    /**
     * A boolean representing if the QR code should be archived (hidden from the UI) upon creation
     * @type {boolean}
     * @memberof PublicCreateQRCodeRequest
     */
    archived?: boolean;
    /**
     * 
     * @type {QRCodeDestination}
     * @memberof PublicCreateQRCodeRequest
     */
    destination: QRCodeDestination;
    /**
     * 
     * @type {GS1Metadata}
     * @memberof PublicCreateQRCodeRequest
     */
    gs1?: GS1Metadata;
}

/**
 * Check if a given object implements the PublicCreateQRCodeRequest interface.
 */
export function instanceOfPublicCreateQRCodeRequest(value: object): value is PublicCreateQRCodeRequest {
    if (!('group_guid' in value) || value['group_guid'] === undefined) return false;
    if (!('destination' in value) || value['destination'] === undefined) return false;
    return true;
}

export function PublicCreateQRCodeRequestFromJSON(json: any): PublicCreateQRCodeRequest {
    return PublicCreateQRCodeRequestFromJSONTyped(json, false);
}

export function PublicCreateQRCodeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicCreateQRCodeRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'group_guid': json['group_guid'],
        'render_customizations': json['render_customizations'] == null ? undefined : QRCodeCustomizationsPublicFromJSON(json['render_customizations']),
        'archived': json['archived'] == null ? undefined : json['archived'],
        'destination': QRCodeDestinationFromJSON(json['destination']),
        'gs1': json['gs1'] == null ? undefined : GS1MetadataFromJSON(json['gs1']),
    };
}

export function PublicCreateQRCodeRequestToJSON(json: any): PublicCreateQRCodeRequest {
    return PublicCreateQRCodeRequestToJSONTyped(json, false);
}

export function PublicCreateQRCodeRequestToJSONTyped(value?: PublicCreateQRCodeRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'group_guid': value['group_guid'],
        'render_customizations': QRCodeCustomizationsPublicToJSON(value['render_customizations']),
        'archived': value['archived'],
        'destination': QRCodeDestinationToJSON(value['destination']),
        'gs1': GS1MetadataToJSON(value['gs1']),
    };
}

