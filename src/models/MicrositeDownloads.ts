/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MicrositeDownloadMetric } from './MicrositeDownloadMetric';
import {
    MicrositeDownloadMetricFromJSON,
    MicrositeDownloadMetricFromJSONTyped,
    MicrositeDownloadMetricToJSON,
    MicrositeDownloadMetricToJSONTyped,
} from './MicrositeDownloadMetric';

/**
 * 
 * @export
 * @interface MicrositeDownloads
 */
export interface MicrositeDownloads {
    /**
     * 
     * @type {Array<MicrositeDownloadMetric>}
     * @memberof MicrositeDownloads
     */
    metrics?: Array<MicrositeDownloadMetric>;
    /**
     * 
     * @type {number}
     * @memberof MicrositeDownloads
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrositeDownloads
     */
    units?: number;
    /**
     * 
     * @type {string}
     * @memberof MicrositeDownloads
     */
    unit?: MicrositeDownloadsUnitEnum;
    /**
     * 
     * @type {string}
     * @memberof MicrositeDownloads
     */
    unit_reference?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrositeDownloads
     */
    facet?: MicrositeDownloadsFacetEnum;
}

/**
* @export
* @enum {string}
*/
export enum MicrositeDownloadsUnitEnum {
    minute = 'minute',
    hour = 'hour',
    day = 'day',
    week = 'week',
    month = 'month'
}
/**
* @export
* @enum {string}
*/
export enum MicrositeDownloadsFacetEnum {
    views = 'views',
    countries = 'countries',
    referrers = 'referrers',
    devices = 'devices'
}


/**
 * Check if a given object implements the MicrositeDownloads interface.
 */
export function instanceOfMicrositeDownloads(value: object): value is MicrositeDownloads {
    return true;
}

export function MicrositeDownloadsFromJSON(json: any): MicrositeDownloads {
    return MicrositeDownloadsFromJSONTyped(json, false);
}

export function MicrositeDownloadsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MicrositeDownloads {
    if (json == null) {
        return json;
    }
    return {
        
        'metrics': json['metrics'] == null ? undefined : ((json['metrics'] as Array<any>).map(MicrositeDownloadMetricFromJSON)),
        'size': json['size'] == null ? undefined : json['size'],
        'units': json['units'] == null ? undefined : json['units'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'unit_reference': json['unit_reference'] == null ? undefined : json['unit_reference'],
        'facet': json['facet'] == null ? undefined : json['facet'],
    };
}

export function MicrositeDownloadsToJSON(json: any): MicrositeDownloads {
    return MicrositeDownloadsToJSONTyped(json, false);
}

export function MicrositeDownloadsToJSONTyped(value?: MicrositeDownloads | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metrics': value['metrics'] == null ? undefined : ((value['metrics'] as Array<any>).map(MicrositeDownloadMetricToJSON)),
        'size': value['size'],
        'units': value['units'],
        'unit': value['unit'],
        'unit_reference': value['unit_reference'],
        'facet': value['facet'],
    };
}

