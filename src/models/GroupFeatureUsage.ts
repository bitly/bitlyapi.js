/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupConsumableFeatureUsage } from './GroupConsumableFeatureUsage';
import {
    GroupConsumableFeatureUsageFromJSON,
    GroupConsumableFeatureUsageFromJSONTyped,
    GroupConsumableFeatureUsageToJSON,
    GroupConsumableFeatureUsageToJSONTyped,
} from './GroupConsumableFeatureUsage';

/**
 * 
 * @export
 * @interface GroupFeatureUsage
 */
export interface GroupFeatureUsage {
    /**
     * the group's guid
     * @type {string}
     * @memberof GroupFeatureUsage
     */
    group_guid: string;
    /**
     * an array of all of the group's consumable feature usage
     * @type {Array<GroupConsumableFeatureUsage>}
     * @memberof GroupFeatureUsage
     */
    limit_usage: Array<GroupConsumableFeatureUsage>;
}

/**
 * Check if a given object implements the GroupFeatureUsage interface.
 */
export function instanceOfGroupFeatureUsage(value: object): value is GroupFeatureUsage {
    if (!('group_guid' in value) || value['group_guid'] === undefined) return false;
    if (!('limit_usage' in value) || value['limit_usage'] === undefined) return false;
    return true;
}

export function GroupFeatureUsageFromJSON(json: any): GroupFeatureUsage {
    return GroupFeatureUsageFromJSONTyped(json, false);
}

export function GroupFeatureUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupFeatureUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'group_guid': json['group_guid'],
        'limit_usage': ((json['limit_usage'] as Array<any>).map(GroupConsumableFeatureUsageFromJSON)),
    };
}

export function GroupFeatureUsageToJSON(json: any): GroupFeatureUsage {
    return GroupFeatureUsageToJSONTyped(json, false);
}

export function GroupFeatureUsageToJSONTyped(value?: GroupFeatureUsage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'group_guid': value['group_guid'],
        'limit_usage': ((value['limit_usage'] as Array<any>).map(GroupConsumableFeatureUsageToJSON)),
    };
}

