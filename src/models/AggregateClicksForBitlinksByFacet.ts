/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ClicksByFacet } from './ClicksByFacet';
import {
    ClicksByFacetFromJSON,
    ClicksByFacetFromJSONTyped,
    ClicksByFacetToJSON,
    ClicksByFacetToJSONTyped,
} from './ClicksByFacet';

/**
 * 
 * @export
 * @interface AggregateClicksForBitlinksByFacet
 */
export interface AggregateClicksForBitlinksByFacet {
    /**
     * 
     * @type {string}
     * @memberof AggregateClicksForBitlinksByFacet
     */
    unit_reference?: string;
    /**
     * 
     * @type {string}
     * @memberof AggregateClicksForBitlinksByFacet
     */
    unit?: string;
    /**
     * 
     * @type {number}
     * @memberof AggregateClicksForBitlinksByFacet
     */
    units?: number;
    /**
     * 
     * @type {string}
     * @memberof AggregateClicksForBitlinksByFacet
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof AggregateClicksForBitlinksByFacet
     */
    facet?: string;
    /**
     * 
     * @type {Array<ClicksByFacet>}
     * @memberof AggregateClicksForBitlinksByFacet
     */
    totals_for_time_period?: Array<ClicksByFacet>;
}

/**
 * Check if a given object implements the AggregateClicksForBitlinksByFacet interface.
 */
export function instanceOfAggregateClicksForBitlinksByFacet(value: object): value is AggregateClicksForBitlinksByFacet {
    return true;
}

export function AggregateClicksForBitlinksByFacetFromJSON(json: any): AggregateClicksForBitlinksByFacet {
    return AggregateClicksForBitlinksByFacetFromJSONTyped(json, false);
}

export function AggregateClicksForBitlinksByFacetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregateClicksForBitlinksByFacet {
    if (json == null) {
        return json;
    }
    return {
        
        'unit_reference': json['unit_reference'] == null ? undefined : json['unit_reference'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'units': json['units'] == null ? undefined : json['units'],
        'info': json['info'] == null ? undefined : json['info'],
        'facet': json['facet'] == null ? undefined : json['facet'],
        'totals_for_time_period': json['totals_for_time_period'] == null ? undefined : ((json['totals_for_time_period'] as Array<any>).map(ClicksByFacetFromJSON)),
    };
}

export function AggregateClicksForBitlinksByFacetToJSON(json: any): AggregateClicksForBitlinksByFacet {
    return AggregateClicksForBitlinksByFacetToJSONTyped(json, false);
}

export function AggregateClicksForBitlinksByFacetToJSONTyped(value?: AggregateClicksForBitlinksByFacet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'unit_reference': value['unit_reference'],
        'unit': value['unit'],
        'units': value['units'],
        'info': value['info'],
        'facet': value['facet'],
        'totals_for_time_period': value['totals_for_time_period'] == null ? undefined : ((value['totals_for_time_period'] as Array<any>).map(ClicksByFacetToJSON)),
    };
}

