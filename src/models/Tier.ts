/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PriceMap } from './PriceMap';
import {
    PriceMapFromJSON,
    PriceMapFromJSONTyped,
    PriceMapToJSON,
    PriceMapToJSONTyped,
} from './PriceMap';
import type { DefaultConsumableFeature } from './DefaultConsumableFeature';
import {
    DefaultConsumableFeatureFromJSON,
    DefaultConsumableFeatureFromJSONTyped,
    DefaultConsumableFeatureToJSON,
    DefaultConsumableFeatureToJSONTyped,
} from './DefaultConsumableFeature';
import type { AddOnSetting } from './AddOnSetting';
import {
    AddOnSettingFromJSON,
    AddOnSettingFromJSONTyped,
    AddOnSettingToJSON,
    AddOnSettingToJSONTyped,
} from './AddOnSetting';
import type { DefaultAccessFeature } from './DefaultAccessFeature';
import {
    DefaultAccessFeatureFromJSON,
    DefaultAccessFeatureFromJSONTyped,
    DefaultAccessFeatureToJSON,
    DefaultAccessFeatureToJSONTyped,
} from './DefaultAccessFeature';

/**
 * a single tier
 * @export
 * @interface Tier
 */
export interface Tier {
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    display_name: string;
    /**
     * 
     * @type {PriceMap}
     * @memberof Tier
     */
    price_map?: PriceMap;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    family: TierFamilyEnum;
    /**
     * 
     * @type {number}
     * @memberof Tier
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    price_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    display_icon: string;
    /**
     * 
     * @type {boolean}
     * @memberof Tier
     */
    is_self_service: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Tier
     */
    is_paid: boolean;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    billing_period_type: TierBillingPeriodTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Tier
     */
    sort_order: number;
    /**
     * 
     * @type {Array<DefaultConsumableFeature>}
     * @memberof Tier
     */
    consumable_features: Array<DefaultConsumableFeature>;
    /**
     * 
     * @type {Array<DefaultAccessFeature>}
     * @memberof Tier
     */
    access_features: Array<DefaultAccessFeature>;
    /**
     * 
     * @type {Array<AddOnSetting>}
     * @memberof Tier
     */
    add_on_settings: Array<AddOnSetting>;
}

/**
* @export
* @enum {string}
*/
export enum TierFamilyEnum {
    basic = 'basic',
    company = 'company',
    core = 'core',
    developer = 'developer',
    educator = 'educator',
    enterprise = 'enterprise',
    free = 'free',
    growth = 'growth',
    premium = 'premium',
    pro = 'pro',
    qr_code_essentials = 'qr_code_essentials',
    spotlight = 'spotlight',
    starter = 'starter',
    teams = 'teams'
}
/**
* @export
* @enum {string}
*/
export enum TierBillingPeriodTypeEnum {
    annual = 'annual',
    month = 'month'
}


/**
 * Check if a given object implements the Tier interface.
 */
export function instanceOfTier(value: object): value is Tier {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('display_name' in value) || value['display_name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('family' in value) || value['family'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('display_icon' in value) || value['display_icon'] === undefined) return false;
    if (!('is_self_service' in value) || value['is_self_service'] === undefined) return false;
    if (!('is_paid' in value) || value['is_paid'] === undefined) return false;
    if (!('billing_period_type' in value) || value['billing_period_type'] === undefined) return false;
    if (!('sort_order' in value) || value['sort_order'] === undefined) return false;
    if (!('consumable_features' in value) || value['consumable_features'] === undefined) return false;
    if (!('access_features' in value) || value['access_features'] === undefined) return false;
    if (!('add_on_settings' in value) || value['add_on_settings'] === undefined) return false;
    return true;
}

export function TierFromJSON(json: any): Tier {
    return TierFromJSONTyped(json, false);
}

export function TierFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tier {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'display_name': json['display_name'],
        'price_map': json['price_map'] == null ? undefined : PriceMapFromJSON(json['price_map']),
        'description': json['description'],
        'family': json['family'],
        'price': json['price'],
        'price_id': json['price_id'] == null ? undefined : json['price_id'],
        'display_icon': json['display_icon'],
        'is_self_service': json['is_self_service'],
        'is_paid': json['is_paid'],
        'billing_period_type': json['billing_period_type'],
        'sort_order': json['sort_order'],
        'consumable_features': ((json['consumable_features'] as Array<any>).map(DefaultConsumableFeatureFromJSON)),
        'access_features': ((json['access_features'] as Array<any>).map(DefaultAccessFeatureFromJSON)),
        'add_on_settings': ((json['add_on_settings'] as Array<any>).map(AddOnSettingFromJSON)),
    };
}

export function TierToJSON(json: any): Tier {
    return TierToJSONTyped(json, false);
}

export function TierToJSONTyped(value?: Tier | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'display_name': value['display_name'],
        'price_map': PriceMapToJSON(value['price_map']),
        'description': value['description'],
        'family': value['family'],
        'price': value['price'],
        'price_id': value['price_id'],
        'display_icon': value['display_icon'],
        'is_self_service': value['is_self_service'],
        'is_paid': value['is_paid'],
        'billing_period_type': value['billing_period_type'],
        'sort_order': value['sort_order'],
        'consumable_features': ((value['consumable_features'] as Array<any>).map(DefaultConsumableFeatureToJSON)),
        'access_features': ((value['access_features'] as Array<any>).map(DefaultAccessFeatureToJSON)),
        'add_on_settings': ((value['add_on_settings'] as Array<any>).map(AddOnSettingToJSON)),
    };
}

