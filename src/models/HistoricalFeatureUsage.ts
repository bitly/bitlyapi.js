/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { HistoricalUsage } from './HistoricalUsage';
import {
    HistoricalUsageFromJSON,
    HistoricalUsageFromJSONTyped,
    HistoricalUsageToJSON,
    HistoricalUsageToJSONTyped,
} from './HistoricalUsage';

/**
 * 
 * @export
 * @interface HistoricalFeatureUsage
 */
export interface HistoricalFeatureUsage {
    /**
     * feature name
     * @type {string}
     * @memberof HistoricalFeatureUsage
     */
    name?: string;
    /**
     * 
     * @type {Array<HistoricalUsage>}
     * @memberof HistoricalFeatureUsage
     */
    usage?: Array<HistoricalUsage>;
}

/**
 * Check if a given object implements the HistoricalFeatureUsage interface.
 */
export function instanceOfHistoricalFeatureUsage(value: object): value is HistoricalFeatureUsage {
    return true;
}

export function HistoricalFeatureUsageFromJSON(json: any): HistoricalFeatureUsage {
    return HistoricalFeatureUsageFromJSONTyped(json, false);
}

export function HistoricalFeatureUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoricalFeatureUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'usage': json['usage'] == null ? undefined : ((json['usage'] as Array<any>).map(HistoricalUsageFromJSON)),
    };
}

export function HistoricalFeatureUsageToJSON(json: any): HistoricalFeatureUsage {
    return HistoricalFeatureUsageToJSONTyped(json, false);
}

export function HistoricalFeatureUsageToJSONTyped(value?: HistoricalFeatureUsage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'usage': value['usage'] == null ? undefined : ((value['usage'] as Array<any>).map(HistoricalUsageToJSON)),
    };
}

