/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceDownloadMetric } from './DeviceDownloadMetric';
import {
    DeviceDownloadMetricFromJSON,
    DeviceDownloadMetricFromJSONTyped,
    DeviceDownloadMetricToJSON,
    DeviceDownloadMetricToJSONTyped,
} from './DeviceDownloadMetric';

/**
 * 
 * @export
 * @interface DeviceDownloadMetrics
 */
export interface DeviceDownloadMetrics {
    /**
     * 
     * @type {Array<DeviceDownloadMetric>}
     * @memberof DeviceDownloadMetrics
     */
    metrics?: Array<DeviceDownloadMetric>;
    /**
     * 
     * @type {number}
     * @memberof DeviceDownloadMetrics
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceDownloadMetrics
     */
    units?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceDownloadMetrics
     */
    unit?: DeviceDownloadMetricsUnitEnum;
    /**
     * 
     * @type {string}
     * @memberof DeviceDownloadMetrics
     */
    unit_reference?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDownloadMetrics
     */
    facet?: DeviceDownloadMetricsFacetEnum;
}

/**
* @export
* @enum {string}
*/
export enum DeviceDownloadMetricsUnitEnum {
    minute = 'minute',
    hour = 'hour',
    day = 'day',
    week = 'week',
    month = 'month'
}
/**
* @export
* @enum {string}
*/
export enum DeviceDownloadMetricsFacetEnum {
    views = 'views',
    countries = 'countries',
    referrers = 'referrers',
    devices = 'devices'
}


/**
 * Check if a given object implements the DeviceDownloadMetrics interface.
 */
export function instanceOfDeviceDownloadMetrics(value: object): value is DeviceDownloadMetrics {
    return true;
}

export function DeviceDownloadMetricsFromJSON(json: any): DeviceDownloadMetrics {
    return DeviceDownloadMetricsFromJSONTyped(json, false);
}

export function DeviceDownloadMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceDownloadMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        'metrics': json['metrics'] == null ? undefined : ((json['metrics'] as Array<any>).map(DeviceDownloadMetricFromJSON)),
        'size': json['size'] == null ? undefined : json['size'],
        'units': json['units'] == null ? undefined : json['units'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'unit_reference': json['unit_reference'] == null ? undefined : json['unit_reference'],
        'facet': json['facet'] == null ? undefined : json['facet'],
    };
}

export function DeviceDownloadMetricsToJSON(json: any): DeviceDownloadMetrics {
    return DeviceDownloadMetricsToJSONTyped(json, false);
}

export function DeviceDownloadMetricsToJSONTyped(value?: DeviceDownloadMetrics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metrics': value['metrics'] == null ? undefined : ((value['metrics'] as Array<any>).map(DeviceDownloadMetricToJSON)),
        'size': value['size'],
        'units': value['units'],
        'unit': value['unit'],
        'unit_reference': value['unit_reference'],
        'facet': value['facet'],
    };
}

