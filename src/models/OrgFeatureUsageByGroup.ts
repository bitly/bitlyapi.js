/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupFeatureUsage } from './GroupFeatureUsage';
import {
    GroupFeatureUsageFromJSON,
    GroupFeatureUsageFromJSONTyped,
    GroupFeatureUsageToJSON,
    GroupFeatureUsageToJSONTyped,
} from './GroupFeatureUsage';

/**
 * 
 * @export
 * @interface OrgFeatureUsageByGroup
 */
export interface OrgFeatureUsageByGroup {
    /**
     * the organization's guid
     * @type {string}
     * @memberof OrgFeatureUsageByGroup
     */
    org_guid: string;
    /**
     * an array of all of the groups' feature usage
     * @type {Array<GroupFeatureUsage>}
     * @memberof OrgFeatureUsageByGroup
     */
    groups_limit_usage: Array<GroupFeatureUsage>;
}

/**
 * Check if a given object implements the OrgFeatureUsageByGroup interface.
 */
export function instanceOfOrgFeatureUsageByGroup(value: object): value is OrgFeatureUsageByGroup {
    if (!('org_guid' in value) || value['org_guid'] === undefined) return false;
    if (!('groups_limit_usage' in value) || value['groups_limit_usage'] === undefined) return false;
    return true;
}

export function OrgFeatureUsageByGroupFromJSON(json: any): OrgFeatureUsageByGroup {
    return OrgFeatureUsageByGroupFromJSONTyped(json, false);
}

export function OrgFeatureUsageByGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrgFeatureUsageByGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'org_guid': json['org_guid'],
        'groups_limit_usage': ((json['groups_limit_usage'] as Array<any>).map(GroupFeatureUsageFromJSON)),
    };
}

export function OrgFeatureUsageByGroupToJSON(json: any): OrgFeatureUsageByGroup {
    return OrgFeatureUsageByGroupToJSONTyped(json, false);
}

export function OrgFeatureUsageByGroupToJSONTyped(value?: OrgFeatureUsageByGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'org_guid': value['org_guid'],
        'groups_limit_usage': ((value['groups_limit_usage'] as Array<any>).map(GroupFeatureUsageToJSON)),
    };
}

