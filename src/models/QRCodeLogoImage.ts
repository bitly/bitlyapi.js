/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeLogoType } from './QRCodeLogoType';
import {
    QRCodeLogoTypeFromJSON,
    QRCodeLogoTypeFromJSONTyped,
    QRCodeLogoTypeToJSON,
    QRCodeLogoTypeToJSONTyped,
} from './QRCodeLogoType';

/**
 * 
 * @export
 * @interface QRCodeLogoImage
 */
export interface QRCodeLogoImage {
    /**
     * 
     * @type {QRCodeLogoType}
     * @memberof QRCodeLogoImage
     */
    id: QRCodeLogoType;
    /**
     * The QR code's thumbnail image data as a data uri. Can be svg, png, jpg. Only used in response bodies.
     * @type {any}
     * @memberof QRCodeLogoImage
     */
    thumbnail: any | null;
    /**
     * Determines whether the user has acccess to this field
     * @type {boolean}
     * @memberof QRCodeLogoImage
     */
    locked?: boolean;
}



/**
 * Check if a given object implements the QRCodeLogoImage interface.
 */
export function instanceOfQRCodeLogoImage(value: object): value is QRCodeLogoImage {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('thumbnail' in value) || value['thumbnail'] === undefined) return false;
    return true;
}

export function QRCodeLogoImageFromJSON(json: any): QRCodeLogoImage {
    return QRCodeLogoImageFromJSONTyped(json, false);
}

export function QRCodeLogoImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeLogoImage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': QRCodeLogoTypeFromJSON(json['id']),
        'thumbnail': json['thumbnail'],
        'locked': json['locked'] == null ? undefined : json['locked'],
    };
}

export function QRCodeLogoImageToJSON(json: any): QRCodeLogoImage {
    return QRCodeLogoImageToJSONTyped(json, false);
}

export function QRCodeLogoImageToJSONTyped(value?: QRCodeLogoImage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': QRCodeLogoTypeToJSON(value['id']),
        'thumbnail': value['thumbnail'],
        'locked': value['locked'],
    };
}

