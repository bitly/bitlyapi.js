/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Subregion } from './Subregion';
import {
    SubregionFromJSON,
    SubregionFromJSONTyped,
    SubregionToJSON,
    SubregionToJSONTyped,
} from './Subregion';

/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    region_name?: string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    iso2?: string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    iso3?: string;
    /**
     * 
     * @type {Array<Subregion>}
     * @memberof Region
     */
    subregions?: Array<Subregion>;
}

/**
 * Check if a given object implements the Region interface.
 */
export function instanceOfRegion(value: object): value is Region {
    return true;
}

export function RegionFromJSON(json: any): Region {
    return RegionFromJSONTyped(json, false);
}

export function RegionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Region {
    if (json == null) {
        return json;
    }
    return {
        
        'region_name': json['region_name'] == null ? undefined : json['region_name'],
        'iso2': json['iso2'] == null ? undefined : json['iso2'],
        'iso3': json['iso3'] == null ? undefined : json['iso3'],
        'subregions': json['subregions'] == null ? undefined : ((json['subregions'] as Array<any>).map(SubregionFromJSON)),
    };
}

export function RegionToJSON(json: any): Region {
    return RegionToJSONTyped(json, false);
}

export function RegionToJSONTyped(value?: Region | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'region_name': value['region_name'],
        'iso2': value['iso2'],
        'iso3': value['iso3'],
        'subregions': value['subregions'] == null ? undefined : ((value['subregions'] as Array<any>).map(SubregionToJSON)),
    };
}

