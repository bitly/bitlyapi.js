/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents one corner, both inner and outer, of a QR code, with color and shape values
 * @export
 * @interface QRCodeCorner
 */
export interface QRCodeCorner {
    /**
     * The inner color of a corner of the QR code in hex code format
     * @type {string}
     * @memberof QRCodeCorner
     */
    inner_color?: string;
    /**
     * The outer color of a corner of the QR code in hex code format
     * @type {string}
     * @memberof QRCodeCorner
     */
    outer_color?: string;
    /**
     * The shape one of the QR code's corners should take
     * @type {string}
     * @memberof QRCodeCorner
     */
    shape?: QRCodeCornerShapeEnum;
}

/**
* @export
* @enum {string}
*/
export enum QRCodeCornerShapeEnum {
    standard = 'standard',
    slightly_round = 'slightly_round',
    rounded = 'rounded',
    extra_round = 'extra_round',
    leaf = 'leaf',
    leaf_inner = 'leaf_inner',
    leaf_outer = 'leaf_outer',
    target = 'target',
    concave = 'concave'
}


/**
 * Check if a given object implements the QRCodeCorner interface.
 */
export function instanceOfQRCodeCorner(value: object): value is QRCodeCorner {
    return true;
}

export function QRCodeCornerFromJSON(json: any): QRCodeCorner {
    return QRCodeCornerFromJSONTyped(json, false);
}

export function QRCodeCornerFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeCorner {
    if (json == null) {
        return json;
    }
    return {
        
        'inner_color': json['inner_color'] == null ? undefined : json['inner_color'],
        'outer_color': json['outer_color'] == null ? undefined : json['outer_color'],
        'shape': json['shape'] == null ? undefined : json['shape'],
    };
}

export function QRCodeCornerToJSON(json: any): QRCodeCorner {
    return QRCodeCornerToJSONTyped(json, false);
}

export function QRCodeCornerToJSONTyped(value?: QRCodeCorner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'inner_color': value['inner_color'],
        'outer_color': value['outer_color'],
        'shape': value['shape'],
    };
}

