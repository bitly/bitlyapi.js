/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormPage } from './FormPage';
import {
    FormPageFromJSON,
    FormPageFromJSONTyped,
    FormPageToJSON,
    FormPageToJSONTyped,
} from './FormPage';

/**
 * 
 * @export
 * @interface FormCapturePayload
 */
export interface FormCapturePayload {
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    submit_text?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    skip_text?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    org_guid?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    group_guid?: string;
    /**
     * 
     * @type {string}
     * @memberof FormCapturePayload
     */
    response_status?: string;
    /**
     * 
     * @type {Array<FormPage>}
     * @memberof FormCapturePayload
     */
    pages?: Array<FormPage>;
}

/**
 * Check if a given object implements the FormCapturePayload interface.
 */
export function instanceOfFormCapturePayload(value: object): value is FormCapturePayload {
    return true;
}

export function FormCapturePayloadFromJSON(json: any): FormCapturePayload {
    return FormCapturePayloadFromJSONTyped(json, false);
}

export function FormCapturePayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormCapturePayload {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'version': json['version'] == null ? undefined : json['version'],
        'submit_text': json['submit_text'] == null ? undefined : json['submit_text'],
        'skip_text': json['skip_text'] == null ? undefined : json['skip_text'],
        'login': json['login'] == null ? undefined : json['login'],
        'org_guid': json['org_guid'] == null ? undefined : json['org_guid'],
        'group_guid': json['group_guid'] == null ? undefined : json['group_guid'],
        'response_status': json['response_status'] == null ? undefined : json['response_status'],
        'pages': json['pages'] == null ? undefined : ((json['pages'] as Array<any>).map(FormPageFromJSON)),
    };
}

export function FormCapturePayloadToJSON(json: any): FormCapturePayload {
    return FormCapturePayloadToJSONTyped(json, false);
}

export function FormCapturePayloadToJSONTyped(value?: FormCapturePayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'version': value['version'],
        'submit_text': value['submit_text'],
        'skip_text': value['skip_text'],
        'login': value['login'],
        'org_guid': value['org_guid'],
        'group_guid': value['group_guid'],
        'response_status': value['response_status'],
        'pages': value['pages'] == null ? undefined : ((value['pages'] as Array<any>).map(FormPageToJSON)),
    };
}

