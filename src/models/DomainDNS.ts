/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DomainDNS
 */
export interface DomainDNS {
    /**
     * the requested domain
     * @type {string}
     * @memberof DomainDNS
     */
    domain?: string;
    /**
     * the detected DNS provider for the requested domain
     * @type {string}
     * @memberof DomainDNS
     */
    dns_provider?: DomainDNSDnsProviderEnum;
    /**
     * the type of DNS record returned
     * @type {string}
     * @memberof DomainDNS
     */
    type?: DomainDNSTypeEnum;
    /**
     * the records returned by the lookup
     * @type {Array<string>}
     * @memberof DomainDNS
     */
    records?: Array<string>;
    /**
     * whether the returned records represent a valid configuration
     * @type {boolean}
     * @memberof DomainDNS
     */
    records_valid?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum DomainDNSDnsProviderEnum {
    unknown = 'unknown',
    godaddy = 'godaddy',
    cloudflare = 'cloudflare',
    namecheap = 'namecheap'
}
/**
* @export
* @enum {string}
*/
export enum DomainDNSTypeEnum {
    a = 'A',
    cname = 'CNAME',
    unknown = 'unknown'
}


/**
 * Check if a given object implements the DomainDNS interface.
 */
export function instanceOfDomainDNS(value: object): value is DomainDNS {
    return true;
}

export function DomainDNSFromJSON(json: any): DomainDNS {
    return DomainDNSFromJSONTyped(json, false);
}

export function DomainDNSFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainDNS {
    if (json == null) {
        return json;
    }
    return {
        
        'domain': json['domain'] == null ? undefined : json['domain'],
        'dns_provider': json['dns_provider'] == null ? undefined : json['dns_provider'],
        'type': json['type'] == null ? undefined : json['type'],
        'records': json['records'] == null ? undefined : json['records'],
        'records_valid': json['records_valid'] == null ? undefined : json['records_valid'],
    };
}

export function DomainDNSToJSON(json: any): DomainDNS {
    return DomainDNSToJSONTyped(json, false);
}

export function DomainDNSToJSONTyped(value?: DomainDNS | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'domain': value['domain'],
        'dns_provider': value['dns_provider'],
        'type': value['type'],
        'records': value['records'],
        'records_valid': value['records_valid'],
    };
}

