/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AppAssociationDetail } from './AppAssociationDetail';
import {
    AppAssociationDetailFromJSON,
    AppAssociationDetailFromJSONTyped,
    AppAssociationDetailToJSON,
    AppAssociationDetailToJSONTyped,
} from './AppAssociationDetail';
import type { InstallPreference } from './InstallPreference';
import {
    InstallPreferenceFromJSON,
    InstallPreferenceFromJSONTyped,
    InstallPreferenceToJSON,
    InstallPreferenceToJSONTyped,
} from './InstallPreference';

/**
 * 
 * @export
 * @interface AppAssociations
 */
export interface AppAssociations {
    /**
     * 
     * @type {string}
     * @memberof AppAssociations
     */
    custom_domain?: string;
    /**
     * 
     * @type {Array<AppAssociationDetail>}
     * @memberof AppAssociations
     */
    ios_apps?: Array<AppAssociationDetail>;
    /**
     * 
     * @type {Array<AppAssociationDetail>}
     * @memberof AppAssociations
     */
    android_apps?: Array<AppAssociationDetail>;
    /**
     * 
     * @type {InstallPreference}
     * @memberof AppAssociations
     */
    ios_install_preference?: InstallPreference;
    /**
     * 
     * @type {InstallPreference}
     * @memberof AppAssociations
     */
    android_install_preference?: InstallPreference;
}



/**
 * Check if a given object implements the AppAssociations interface.
 */
export function instanceOfAppAssociations(value: object): value is AppAssociations {
    return true;
}

export function AppAssociationsFromJSON(json: any): AppAssociations {
    return AppAssociationsFromJSONTyped(json, false);
}

export function AppAssociationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppAssociations {
    if (json == null) {
        return json;
    }
    return {
        
        'custom_domain': json['custom_domain'] == null ? undefined : json['custom_domain'],
        'ios_apps': json['ios_apps'] == null ? undefined : ((json['ios_apps'] as Array<any>).map(AppAssociationDetailFromJSON)),
        'android_apps': json['android_apps'] == null ? undefined : ((json['android_apps'] as Array<any>).map(AppAssociationDetailFromJSON)),
        'ios_install_preference': json['ios_install_preference'] == null ? undefined : InstallPreferenceFromJSON(json['ios_install_preference']),
        'android_install_preference': json['android_install_preference'] == null ? undefined : InstallPreferenceFromJSON(json['android_install_preference']),
    };
}

export function AppAssociationsToJSON(json: any): AppAssociations {
    return AppAssociationsToJSONTyped(json, false);
}

export function AppAssociationsToJSONTyped(value?: AppAssociations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'custom_domain': value['custom_domain'],
        'ios_apps': value['ios_apps'] == null ? undefined : ((value['ios_apps'] as Array<any>).map(AppAssociationDetailToJSON)),
        'android_apps': value['android_apps'] == null ? undefined : ((value['android_apps'] as Array<any>).map(AppAssociationDetailToJSON)),
        'ios_install_preference': InstallPreferenceToJSON(value['ios_install_preference']),
        'android_install_preference': InstallPreferenceToJSON(value['android_install_preference']),
    };
}

