/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeCustomizationsPublic } from './QRCodeCustomizationsPublic';
import {
    QRCodeCustomizationsPublicFromJSON,
    QRCodeCustomizationsPublicFromJSONTyped,
    QRCodeCustomizationsPublicToJSON,
    QRCodeCustomizationsPublicToJSONTyped,
} from './QRCodeCustomizationsPublic';
import type { QRCodeTypeEnum } from './QRCodeTypeEnum';
import {
    QRCodeTypeEnumFromJSON,
    QRCodeTypeEnumFromJSONTyped,
    QRCodeTypeEnumToJSON,
    QRCodeTypeEnumToJSONTyped,
} from './QRCodeTypeEnum';
import type { GS1Metadata } from './GS1Metadata';
import {
    GS1MetadataFromJSON,
    GS1MetadataFromJSONTyped,
    GS1MetadataToJSON,
    GS1MetadataToJSONTyped,
} from './GS1Metadata';

/**
 * 
 * @export
 * @interface QRCodeDetails
 */
export interface QRCodeDetails {
    /**
     * 
     * @type {string}
     * @memberof QRCodeDetails
     */
    qrcode_id?: string;
    /**
     * 
     * @type {string}
     * @memberof QRCodeDetails
     */
    group_guid?: string;
    /**
     * 
     * @type {string}
     * @memberof QRCodeDetails
     */
    title?: string;
    /**
     * 
     * @type {GS1Metadata}
     * @memberof QRCodeDetails
     */
    gs1?: GS1Metadata;
    /**
     * 
     * @type {QRCodeCustomizationsPublic}
     * @memberof QRCodeDetails
     */
    render_customizations?: QRCodeCustomizationsPublic;
    /**
     * 
     * @type {QRCodeTypeEnum}
     * @memberof QRCodeDetails
     */
    qr_code_type?: QRCodeTypeEnum;
    /**
     * The bitlink associated with the qr code. Not all qr codes are associated with one.
     * @type {string}
     * @memberof QRCodeDetails
     */
    bitlink_id?: string;
    /**
     * A list of destination URLs that the qr code leads to.
     * @type {Array<string>}
     * @memberof QRCodeDetails
     */
    long_urls?: Array<string>;
    /**
     * The serialized string of the QR code's content
     * @type {string}
     * @memberof QRCodeDetails
     */
    serialized_content?: string;
    /**
     * 
     * @type {boolean}
     * @memberof QRCodeDetails
     */
    archived?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QRCodeDetails
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof QRCodeDetails
     */
    modified?: string;
}



/**
 * Check if a given object implements the QRCodeDetails interface.
 */
export function instanceOfQRCodeDetails(value: object): value is QRCodeDetails {
    return true;
}

export function QRCodeDetailsFromJSON(json: any): QRCodeDetails {
    return QRCodeDetailsFromJSONTyped(json, false);
}

export function QRCodeDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeDetails {
    if (json == null) {
        return json;
    }
    return {
        
        'qrcode_id': json['qrcode_id'] == null ? undefined : json['qrcode_id'],
        'group_guid': json['group_guid'] == null ? undefined : json['group_guid'],
        'title': json['title'] == null ? undefined : json['title'],
        'gs1': json['gs1'] == null ? undefined : GS1MetadataFromJSON(json['gs1']),
        'render_customizations': json['render_customizations'] == null ? undefined : QRCodeCustomizationsPublicFromJSON(json['render_customizations']),
        'qr_code_type': json['qr_code_type'] == null ? undefined : QRCodeTypeEnumFromJSON(json['qr_code_type']),
        'bitlink_id': json['bitlink_id'] == null ? undefined : json['bitlink_id'],
        'long_urls': json['long_urls'] == null ? undefined : json['long_urls'],
        'serialized_content': json['serialized_content'] == null ? undefined : json['serialized_content'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'created': json['created'] == null ? undefined : json['created'],
        'modified': json['modified'] == null ? undefined : json['modified'],
    };
}

export function QRCodeDetailsToJSON(json: any): QRCodeDetails {
    return QRCodeDetailsToJSONTyped(json, false);
}

export function QRCodeDetailsToJSONTyped(value?: QRCodeDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'qrcode_id': value['qrcode_id'],
        'group_guid': value['group_guid'],
        'title': value['title'],
        'gs1': GS1MetadataToJSON(value['gs1']),
        'render_customizations': QRCodeCustomizationsPublicToJSON(value['render_customizations']),
        'qr_code_type': QRCodeTypeEnumToJSON(value['qr_code_type']),
        'bitlink_id': value['bitlink_id'],
        'long_urls': value['long_urls'],
        'serialized_content': value['serialized_content'],
        'archived': value['archived'],
        'created': value['created'],
        'modified': value['modified'],
    };
}

