/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { HistoricalFeatureUsage } from './HistoricalFeatureUsage';
import {
    HistoricalFeatureUsageFromJSON,
    HistoricalFeatureUsageFromJSONTyped,
    HistoricalFeatureUsageToJSON,
    HistoricalFeatureUsageToJSONTyped,
} from './HistoricalFeatureUsage';

/**
 * 
 * @export
 * @interface GroupHistoricalUsage
 */
export interface GroupHistoricalUsage {
    /**
     * the group's guid
     * @type {string}
     * @memberof GroupHistoricalUsage
     */
    group_guid: string;
    /**
     * A unit of time (day, week, or month)
     * @type {string}
     * @memberof GroupHistoricalUsage
     */
    unit: string;
    /**
     * Start date (format "2006-01-02") of the historical usage
     * @type {string}
     * @memberof GroupHistoricalUsage
     */
    start_date: string;
    /**
     * End date (format "2006-01-02") of the historical usage
     * @type {string}
     * @memberof GroupHistoricalUsage
     */
    end_date: string;
    /**
     * an array of all of the group's historical feature usage
     * @type {Array<HistoricalFeatureUsage>}
     * @memberof GroupHistoricalUsage
     */
    historical_limit_usage: Array<HistoricalFeatureUsage>;
}

/**
 * Check if a given object implements the GroupHistoricalUsage interface.
 */
export function instanceOfGroupHistoricalUsage(value: object): value is GroupHistoricalUsage {
    if (!('group_guid' in value) || value['group_guid'] === undefined) return false;
    if (!('unit' in value) || value['unit'] === undefined) return false;
    if (!('start_date' in value) || value['start_date'] === undefined) return false;
    if (!('end_date' in value) || value['end_date'] === undefined) return false;
    if (!('historical_limit_usage' in value) || value['historical_limit_usage'] === undefined) return false;
    return true;
}

export function GroupHistoricalUsageFromJSON(json: any): GroupHistoricalUsage {
    return GroupHistoricalUsageFromJSONTyped(json, false);
}

export function GroupHistoricalUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupHistoricalUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'group_guid': json['group_guid'],
        'unit': json['unit'],
        'start_date': json['start_date'],
        'end_date': json['end_date'],
        'historical_limit_usage': ((json['historical_limit_usage'] as Array<any>).map(HistoricalFeatureUsageFromJSON)),
    };
}

export function GroupHistoricalUsageToJSON(json: any): GroupHistoricalUsage {
    return GroupHistoricalUsageToJSONTyped(json, false);
}

export function GroupHistoricalUsageToJSONTyped(value?: GroupHistoricalUsage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'group_guid': value['group_guid'],
        'unit': value['unit'],
        'start_date': value['start_date'],
        'end_date': value['end_date'],
        'historical_limit_usage': ((value['historical_limit_usage'] as Array<any>).map(HistoricalFeatureUsageToJSON)),
    };
}

