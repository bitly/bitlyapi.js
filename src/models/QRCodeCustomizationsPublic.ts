/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeGradient } from './QRCodeGradient';
import {
    QRCodeGradientFromJSON,
    QRCodeGradientFromJSONTyped,
    QRCodeGradientToJSON,
    QRCodeGradientToJSONTyped,
} from './QRCodeGradient';
import type { QRCodeLogoPublic } from './QRCodeLogoPublic';
import {
    QRCodeLogoPublicFromJSON,
    QRCodeLogoPublicFromJSONTyped,
    QRCodeLogoPublicToJSON,
    QRCodeLogoPublicToJSONTyped,
} from './QRCodeLogoPublic';
import type { QRCodeDotPatternType } from './QRCodeDotPatternType';
import {
    QRCodeDotPatternTypeFromJSON,
    QRCodeDotPatternTypeFromJSONTyped,
    QRCodeDotPatternTypeToJSON,
    QRCodeDotPatternTypeToJSONTyped,
} from './QRCodeDotPatternType';
import type { QRCodeSpecSettingsPublic } from './QRCodeSpecSettingsPublic';
import {
    QRCodeSpecSettingsPublicFromJSON,
    QRCodeSpecSettingsPublicFromJSONTyped,
    QRCodeSpecSettingsPublicToJSON,
    QRCodeSpecSettingsPublicToJSONTyped,
} from './QRCodeSpecSettingsPublic';
import type { QRCodeCorners } from './QRCodeCorners';
import {
    QRCodeCornersFromJSON,
    QRCodeCornersFromJSONTyped,
    QRCodeCornersToJSON,
    QRCodeCornersToJSONTyped,
} from './QRCodeCorners';
import type { QRCodeFrameRequest } from './QRCodeFrameRequest';
import {
    QRCodeFrameRequestFromJSON,
    QRCodeFrameRequestFromJSONTyped,
    QRCodeFrameRequestToJSON,
    QRCodeFrameRequestToJSONTyped,
} from './QRCodeFrameRequest';
import type { QRCodeBranding } from './QRCodeBranding';
import {
    QRCodeBrandingFromJSON,
    QRCodeBrandingFromJSONTyped,
    QRCodeBrandingToJSON,
    QRCodeBrandingToJSONTyped,
} from './QRCodeBranding';
import type { QRCodeText } from './QRCodeText';
import {
    QRCodeTextFromJSON,
    QRCodeTextFromJSONTyped,
    QRCodeTextToJSON,
    QRCodeTextToJSONTyped,
} from './QRCodeText';

/**
 * Options for customizing a QR Code's appearance
 * @export
 * @interface QRCodeCustomizationsPublic
 */
export interface QRCodeCustomizationsPublic {
    /**
     * The QR code's background color in hex code format with values for alpha channel
     * @type {string}
     * @memberof QRCodeCustomizationsPublic
     */
    background_color?: string;
    /**
     * The QR code's dot pattern color in hex code format
     * @type {string}
     * @memberof QRCodeCustomizationsPublic
     */
    dot_pattern_color?: string;
    /**
     * 
     * @type {QRCodeDotPatternType}
     * @memberof QRCodeCustomizationsPublic
     */
    dot_pattern_type?: QRCodeDotPatternType;
    /**
     * 
     * @type {QRCodeCorners}
     * @memberof QRCodeCustomizationsPublic
     */
    corners?: QRCodeCorners;
    /**
     * 
     * @type {QRCodeGradient}
     * @memberof QRCodeCustomizationsPublic
     */
    gradient?: QRCodeGradient;
    /**
     * 
     * @type {QRCodeGradient}
     * @memberof QRCodeCustomizationsPublic
     */
    background_gradient?: QRCodeGradient;
    /**
     * 
     * @type {QRCodeLogoPublic}
     * @memberof QRCodeCustomizationsPublic
     */
    logo?: QRCodeLogoPublic;
    /**
     * 
     * @type {QRCodeFrameRequest}
     * @memberof QRCodeCustomizationsPublic
     */
    frame?: QRCodeFrameRequest;
    /**
     * 
     * @type {QRCodeText}
     * @memberof QRCodeCustomizationsPublic
     */
    text?: QRCodeText;
    /**
     * 
     * @type {QRCodeBranding}
     * @memberof QRCodeCustomizationsPublic
     */
    branding?: QRCodeBranding;
    /**
     * 
     * @type {QRCodeSpecSettingsPublic}
     * @memberof QRCodeCustomizationsPublic
     */
    spec_settings?: QRCodeSpecSettingsPublic;
}



/**
 * Check if a given object implements the QRCodeCustomizationsPublic interface.
 */
export function instanceOfQRCodeCustomizationsPublic(value: object): value is QRCodeCustomizationsPublic {
    return true;
}

export function QRCodeCustomizationsPublicFromJSON(json: any): QRCodeCustomizationsPublic {
    return QRCodeCustomizationsPublicFromJSONTyped(json, false);
}

export function QRCodeCustomizationsPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeCustomizationsPublic {
    if (json == null) {
        return json;
    }
    return {
        
        'background_color': json['background_color'] == null ? undefined : json['background_color'],
        'dot_pattern_color': json['dot_pattern_color'] == null ? undefined : json['dot_pattern_color'],
        'dot_pattern_type': json['dot_pattern_type'] == null ? undefined : QRCodeDotPatternTypeFromJSON(json['dot_pattern_type']),
        'corners': json['corners'] == null ? undefined : QRCodeCornersFromJSON(json['corners']),
        'gradient': json['gradient'] == null ? undefined : QRCodeGradientFromJSON(json['gradient']),
        'background_gradient': json['background_gradient'] == null ? undefined : QRCodeGradientFromJSON(json['background_gradient']),
        'logo': json['logo'] == null ? undefined : QRCodeLogoPublicFromJSON(json['logo']),
        'frame': json['frame'] == null ? undefined : QRCodeFrameRequestFromJSON(json['frame']),
        'text': json['text'] == null ? undefined : QRCodeTextFromJSON(json['text']),
        'branding': json['branding'] == null ? undefined : QRCodeBrandingFromJSON(json['branding']),
        'spec_settings': json['spec_settings'] == null ? undefined : QRCodeSpecSettingsPublicFromJSON(json['spec_settings']),
    };
}

export function QRCodeCustomizationsPublicToJSON(json: any): QRCodeCustomizationsPublic {
    return QRCodeCustomizationsPublicToJSONTyped(json, false);
}

export function QRCodeCustomizationsPublicToJSONTyped(value?: QRCodeCustomizationsPublic | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'background_color': value['background_color'],
        'dot_pattern_color': value['dot_pattern_color'],
        'dot_pattern_type': QRCodeDotPatternTypeToJSON(value['dot_pattern_type']),
        'corners': QRCodeCornersToJSON(value['corners']),
        'gradient': QRCodeGradientToJSON(value['gradient']),
        'background_gradient': QRCodeGradientToJSON(value['background_gradient']),
        'logo': QRCodeLogoPublicToJSON(value['logo']),
        'frame': QRCodeFrameRequestToJSON(value['frame']),
        'text': QRCodeTextToJSON(value['text']),
        'branding': QRCodeBrandingToJSON(value['branding']),
        'spec_settings': QRCodeSpecSettingsPublicToJSON(value['spec_settings']),
    };
}

