/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QRCodeTypeItem } from './QRCodeTypeItem';
import {
    QRCodeTypeItemFromJSON,
    QRCodeTypeItemFromJSONTyped,
    QRCodeTypeItemToJSON,
    QRCodeTypeItemToJSONTyped,
} from './QRCodeTypeItem';

/**
 * 
 * @export
 * @interface QRCodeTypeResponse
 */
export interface QRCodeTypeResponse {
    /**
     * A list of dynamic QR code types, such as bitlink, email, link in bio, micro site, etc.
     * @type {Array<QRCodeTypeItem>}
     * @memberof QRCodeTypeResponse
     */
    dynamic: Array<QRCodeTypeItem>;
    /**
     * A list of static QR code types, such as wifi password, email, text message, etc.
     * @type {Array<QRCodeTypeItem>}
     * @memberof QRCodeTypeResponse
     */
    _static: Array<QRCodeTypeItem>;
}

/**
 * Check if a given object implements the QRCodeTypeResponse interface.
 */
export function instanceOfQRCodeTypeResponse(value: object): value is QRCodeTypeResponse {
    if (!('dynamic' in value) || value['dynamic'] === undefined) return false;
    if (!('_static' in value) || value['_static'] === undefined) return false;
    return true;
}

export function QRCodeTypeResponseFromJSON(json: any): QRCodeTypeResponse {
    return QRCodeTypeResponseFromJSONTyped(json, false);
}

export function QRCodeTypeResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRCodeTypeResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'dynamic': ((json['dynamic'] as Array<any>).map(QRCodeTypeItemFromJSON)),
        '_static': ((json['static'] as Array<any>).map(QRCodeTypeItemFromJSON)),
    };
}

export function QRCodeTypeResponseToJSON(json: any): QRCodeTypeResponse {
    return QRCodeTypeResponseToJSONTyped(json, false);
}

export function QRCodeTypeResponseToJSONTyped(value?: QRCodeTypeResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dynamic': ((value['dynamic'] as Array<any>).map(QRCodeTypeItemToJSON)),
        'static': ((value['_static'] as Array<any>).map(QRCodeTypeItemToJSON)),
    };
}

