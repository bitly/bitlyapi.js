/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @deprecated LL-2507
 * @export
 * @interface LaunchpadImageUpload
 */
export interface LaunchpadImageUpload {
    /**
     * 
     * @type {Blob}
     * @memberof LaunchpadImageUpload
     */
    image?: Blob;
    /**
     * 
     * @type {string}
     * @memberof LaunchpadImageUpload
     */
    position?: LaunchpadImageUploadPositionEnum;
    /**
     * 
     * @type {string}
     * @memberof LaunchpadImageUpload
     */
    crop?: string;
}

/**
* @export
* @enum {string}
*/
export enum LaunchpadImageUploadPositionEnum {
    profile = 'profile',
    background = 'background',
    banner = 'banner',
    other = 'other'
}


/**
 * Check if a given object implements the LaunchpadImageUpload interface.
 */
export function instanceOfLaunchpadImageUpload(value: object): value is LaunchpadImageUpload {
    return true;
}

export function LaunchpadImageUploadFromJSON(json: any): LaunchpadImageUpload {
    return LaunchpadImageUploadFromJSONTyped(json, false);
}

export function LaunchpadImageUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): LaunchpadImageUpload {
    if (json == null) {
        return json;
    }
    return {
        
        'image': json['image'] == null ? undefined : json['image'],
        'position': json['position'] == null ? undefined : json['position'],
        'crop': json['crop'] == null ? undefined : json['crop'],
    };
}

export function LaunchpadImageUploadToJSON(json: any): LaunchpadImageUpload {
    return LaunchpadImageUploadToJSONTyped(json, false);
}

export function LaunchpadImageUploadToJSONTyped(value?: LaunchpadImageUpload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'image': value['image'],
        'position': value['position'],
        'crop': value['crop'],
    };
}

