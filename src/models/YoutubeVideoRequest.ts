/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface YoutubeVideoRequest
 */
export interface YoutubeVideoRequest {
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoRequest
     */
    video_url?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoRequest
     */
    thumbnail_url?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoRequest
     */
    link_title?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoRequest
     */
    domain?: string;
}

/**
 * Check if a given object implements the YoutubeVideoRequest interface.
 */
export function instanceOfYoutubeVideoRequest(value: object): value is YoutubeVideoRequest {
    return true;
}

export function YoutubeVideoRequestFromJSON(json: any): YoutubeVideoRequest {
    return YoutubeVideoRequestFromJSONTyped(json, false);
}

export function YoutubeVideoRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): YoutubeVideoRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'video_url': json['video_url'] == null ? undefined : json['video_url'],
        'thumbnail_url': json['thumbnail_url'] == null ? undefined : json['thumbnail_url'],
        'link_title': json['link_title'] == null ? undefined : json['link_title'],
        'domain': json['domain'] == null ? undefined : json['domain'],
    };
}

export function YoutubeVideoRequestToJSON(json: any): YoutubeVideoRequest {
    return YoutubeVideoRequestToJSONTyped(json, false);
}

export function YoutubeVideoRequestToJSONTyped(value?: YoutubeVideoRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'video_url': value['video_url'],
        'thumbnail_url': value['thumbnail_url'],
        'link_title': value['link_title'],
        'domain': value['domain'],
    };
}

