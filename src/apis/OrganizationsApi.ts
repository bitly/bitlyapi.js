/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Forbidden,
  InternalError,
  Metrics,
  NotFound,
  Organization,
  Organizations,
  PlanLimits,
  TemporarilyUnavailable,
  TimeUnit,
} from '../models/index';
import {
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalErrorFromJSON,
    InternalErrorToJSON,
    MetricsFromJSON,
    MetricsToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationsFromJSON,
    OrganizationsToJSON,
    PlanLimitsFromJSON,
    PlanLimitsToJSON,
    TemporarilyUnavailableFromJSON,
    TemporarilyUnavailableToJSON,
    TimeUnitFromJSON,
    TimeUnitToJSON,
} from '../models/index';

export interface GetOrganizationRequest {
    organization_guid: string;
}

export interface GetOrganizationShortenCountsRequest {
    organization_guid: string;
    unit: TimeUnit;
    units: number;
    unit_reference?: string;
}

export interface GetOrganizationShortenCountsByGroupRequest {
    organization_guid: string;
}

export interface GetPlanLimitsRequest {
    organization_guid: string;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Retrive details for the specified organization.
     * Retrieve an Organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['organization_guid'] == null) {
            throw new runtime.RequiredError(
                'organization_guid',
                'Required parameter "organization_guid" was null or undefined when calling getOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/organizations/{organization_guid}`;
        urlPath = urlPath.replace(`{${"organization_guid"}}`, encodeURIComponent(String(requestParameters['organization_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Retrive details for the specified organization.
     * Retrieve an Organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the shorten counts for a specific organization over a specified time period.
     * Get Shorten Counts for an Organization
     */
    async getOrganizationShortenCountsRaw(requestParameters: GetOrganizationShortenCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Metrics>> {
        if (requestParameters['organization_guid'] == null) {
            throw new runtime.RequiredError(
                'organization_guid',
                'Required parameter "organization_guid" was null or undefined when calling getOrganizationShortenCounts().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getOrganizationShortenCounts().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getOrganizationShortenCounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/organizations/{organization_guid}/shorten_counts`;
        urlPath = urlPath.replace(`{${"organization_guid"}}`, encodeURIComponent(String(requestParameters['organization_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsFromJSON(jsonValue));
    }

    /**
     * Returns the shorten counts for a specific organization over a specified time period.
     * Get Shorten Counts for an Organization
     */
    async getOrganizationShortenCounts(requestParameters: GetOrganizationShortenCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Metrics> {
        const response = await this.getOrganizationShortenCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the shorten counts for a specific organization by group for the current month.
     * Get Shorten Counts for an Organization by Group
     */
    async getOrganizationShortenCountsByGroupRaw(requestParameters: GetOrganizationShortenCountsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Metrics>> {
        if (requestParameters['organization_guid'] == null) {
            throw new runtime.RequiredError(
                'organization_guid',
                'Required parameter "organization_guid" was null or undefined when calling getOrganizationShortenCountsByGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/organizations/{organization_guid}/shorten_counts_by_group`;
        urlPath = urlPath.replace(`{${"organization_guid"}}`, encodeURIComponent(String(requestParameters['organization_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsFromJSON(jsonValue));
    }

    /**
     * Returns the shorten counts for a specific organization by group for the current month.
     * Get Shorten Counts for an Organization by Group
     */
    async getOrganizationShortenCountsByGroup(requestParameters: GetOrganizationShortenCountsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Metrics> {
        const response = await this.getOrganizationShortenCountsByGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of organizations.
     * Retrieve Organizations
     */
    async getOrganizationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organizations>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/organizations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of organizations.
     * Retrieve Organizations
     */
    async getOrganizations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organizations> {
        const response = await this.getOrganizationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all plan limits and counts available for an organization.
     * Get Plan Limits
     */
    async getPlanLimitsRaw(requestParameters: GetPlanLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanLimits>> {
        if (requestParameters['organization_guid'] == null) {
            throw new runtime.RequiredError(
                'organization_guid',
                'Required parameter "organization_guid" was null or undefined when calling getPlanLimits().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/organizations/{organization_guid}/plan_limits`;
        urlPath = urlPath.replace(`{${"organization_guid"}}`, encodeURIComponent(String(requestParameters['organization_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanLimitsFromJSON(jsonValue));
    }

    /**
     * Returns all plan limits and counts available for an organization.
     * Get Plan Limits
     */
    async getPlanLimits(requestParameters: GetPlanLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanLimits> {
        const response = await this.getPlanLimitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
