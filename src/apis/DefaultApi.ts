/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Forbidden,
  InternalError,
  NotFound,
  OAuthApp,
  TemporarilyUnavailable,
} from '../models/index';
import {
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalErrorFromJSON,
    InternalErrorToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    OAuthAppFromJSON,
    OAuthAppToJSON,
    TemporarilyUnavailableFromJSON,
    TemporarilyUnavailableToJSON,
} from '../models/index';

export interface GetOAuthAppRequest {
    client_id: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Retrieve the details for the provided OAuth App client ID
     * Retrieve OAuth App
     */
    async getOAuthAppRaw(requestParameters: GetOAuthAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthApp>> {
        if (requestParameters['client_id'] == null) {
            throw new runtime.RequiredError(
                'client_id',
                'Required parameter "client_id" was null or undefined when calling getOAuthApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/apps/{client_id}`;
        urlPath = urlPath.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['client_id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthAppFromJSON(jsonValue));
    }

    /**
     * Retrieve the details for the provided OAuth App client ID
     * Retrieve OAuth App
     */
    async getOAuthApp(requestParameters: GetOAuthAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthApp> {
        const response = await this.getOAuthAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
