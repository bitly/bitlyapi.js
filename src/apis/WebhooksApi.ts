/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  Forbidden,
  InternalError,
  MonthlyLimitExceeded,
  NotFound,
  TemporarilyUnavailable,
  UnprocessableEntity,
  UpgradeRequired,
  Webhook,
  WebhookCreate,
  WebhookUpdate,
  Webhooks,
} from '../models/index';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalErrorFromJSON,
    InternalErrorToJSON,
    MonthlyLimitExceededFromJSON,
    MonthlyLimitExceededToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    TemporarilyUnavailableFromJSON,
    TemporarilyUnavailableToJSON,
    UnprocessableEntityFromJSON,
    UnprocessableEntityToJSON,
    UpgradeRequiredFromJSON,
    UpgradeRequiredToJSON,
    WebhookFromJSON,
    WebhookToJSON,
    WebhookCreateFromJSON,
    WebhookCreateToJSON,
    WebhookUpdateFromJSON,
    WebhookUpdateToJSON,
    WebhooksFromJSON,
    WebhooksToJSON,
} from '../models/index';

export interface CreateWebhookRequest {
    webhook_create: WebhookCreate;
}

export interface DeleteWebhookRequest {
    webhook_guid: string;
}

export interface GetWebhookRequest {
    webhook_guid: string;
}

export interface GetWebhooksRequest {
    organization_guid: string;
}

export interface UpdateWebhookRequest {
    webhook_guid: string;
    webhook_update: WebhookUpdate;
}

export interface VerifyWebhookRequest {
    webhook_guid: string;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Creates a webhook.
     * Create Webhook
     */
    async createWebhookRaw(requestParameters: CreateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['webhook_create'] == null) {
            throw new runtime.RequiredError(
                'webhook_create',
                'Required parameter "webhook_create" was null or undefined when calling createWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/webhooks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookCreateToJSON(requestParameters['webhook_create']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Creates a webhook.
     * Create Webhook
     */
    async createWebhook(requestParameters: CreateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.createWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a webhook.
     * Delete Webhook
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['webhook_guid'] == null) {
            throw new runtime.RequiredError(
                'webhook_guid',
                'Required parameter "webhook_guid" was null or undefined when calling deleteWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/webhooks/{webhook_guid}`;
        urlPath = urlPath.replace(`{${"webhook_guid"}}`, encodeURIComponent(String(requestParameters['webhook_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a webhook.
     * Delete Webhook
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a webhook.
     * Retrieve Webhook
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['webhook_guid'] == null) {
            throw new runtime.RequiredError(
                'webhook_guid',
                'Required parameter "webhook_guid" was null or undefined when calling getWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/webhooks/{webhook_guid}`;
        urlPath = urlPath.replace(`{${"webhook_guid"}}`, encodeURIComponent(String(requestParameters['webhook_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Returns a webhook.
     * Retrieve Webhook
     */
    async getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all webhooks available for an Organization
     * Get Webhooks
     */
    async getWebhooksRaw(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhooks>> {
        if (requestParameters['organization_guid'] == null) {
            throw new runtime.RequiredError(
                'organization_guid',
                'Required parameter "organization_guid" was null or undefined when calling getWebhooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/organizations/{organization_guid}/webhooks`;
        urlPath = urlPath.replace(`{${"organization_guid"}}`, encodeURIComponent(String(requestParameters['organization_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhooksFromJSON(jsonValue));
    }

    /**
     * Fetch all webhooks available for an Organization
     * Get Webhooks
     */
    async getWebhooks(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhooks> {
        const response = await this.getWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a webhook
     * Update Webhook
     */
    async updateWebhookRaw(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['webhook_guid'] == null) {
            throw new runtime.RequiredError(
                'webhook_guid',
                'Required parameter "webhook_guid" was null or undefined when calling updateWebhook().'
            );
        }

        if (requestParameters['webhook_update'] == null) {
            throw new runtime.RequiredError(
                'webhook_update',
                'Required parameter "webhook_update" was null or undefined when calling updateWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/webhooks/{webhook_guid}`;
        urlPath = urlPath.replace(`{${"webhook_guid"}}`, encodeURIComponent(String(requestParameters['webhook_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookUpdateToJSON(requestParameters['webhook_update']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Update a webhook
     * Update Webhook
     */
    async updateWebhook(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.updateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends ping event to test webhook configuration.
     * Verify Webhook
     */
    async verifyWebhookRaw(requestParameters: VerifyWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['webhook_guid'] == null) {
            throw new runtime.RequiredError(
                'webhook_guid',
                'Required parameter "webhook_guid" was null or undefined when calling verifyWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/webhooks/{webhook_guid}/verify`;
        urlPath = urlPath.replace(`{${"webhook_guid"}}`, encodeURIComponent(String(requestParameters['webhook_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Sends ping event to test webhook configuration.
     * Verify Webhook
     */
    async verifyWebhook(requestParameters: VerifyWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.verifyWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
