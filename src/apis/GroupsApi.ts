/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  CityMetrics,
  ClickMetrics,
  DeviceMetrics,
  Forbidden,
  Group,
  GroupClicks,
  GroupFeatureUsage,
  GroupHistoricalUsage,
  GroupPreferences,
  GroupUpdate,
  Groups,
  InternalError,
  Metrics,
  MonthlyLimitExceeded,
  NotFound,
  Tags,
  TemporarilyUnavailable,
  TimeUnit,
  TimeUnitDWM,
  UnprocessableEntity,
  UpgradeRequired,
} from '../models/index';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    CityMetricsFromJSON,
    CityMetricsToJSON,
    ClickMetricsFromJSON,
    ClickMetricsToJSON,
    DeviceMetricsFromJSON,
    DeviceMetricsToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupClicksFromJSON,
    GroupClicksToJSON,
    GroupFeatureUsageFromJSON,
    GroupFeatureUsageToJSON,
    GroupHistoricalUsageFromJSON,
    GroupHistoricalUsageToJSON,
    GroupPreferencesFromJSON,
    GroupPreferencesToJSON,
    GroupUpdateFromJSON,
    GroupUpdateToJSON,
    GroupsFromJSON,
    GroupsToJSON,
    InternalErrorFromJSON,
    InternalErrorToJSON,
    MetricsFromJSON,
    MetricsToJSON,
    MonthlyLimitExceededFromJSON,
    MonthlyLimitExceededToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    TagsFromJSON,
    TagsToJSON,
    TemporarilyUnavailableFromJSON,
    TemporarilyUnavailableToJSON,
    TimeUnitFromJSON,
    TimeUnitToJSON,
    TimeUnitDWMFromJSON,
    TimeUnitDWMToJSON,
    UnprocessableEntityFromJSON,
    UnprocessableEntityToJSON,
    UpgradeRequiredFromJSON,
    UpgradeRequiredToJSON,
} from '../models/index';

export interface GetGroupRequest {
    group_guid: string;
}

export interface GetGroupClicksRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    unit_reference?: string;
}

export interface GetGroupFeatureUsageRequest {
    group_guid: string;
    name?: Array<string>;
}

export interface GetGroupHistoricalUsageRequest {
    group_guid: string;
    name?: Array<string>;
    start_date?: string;
    end_date?: string;
    unit?: TimeUnitDWM;
}

export interface GetGroupMetricsByCitiesRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    size?: number;
    unit_reference?: string;
}

export interface GetGroupMetricsByCountriesRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    size?: number;
    unit_reference?: string;
}

export interface GetGroupMetricsByDevicesRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    size?: number;
    unit_reference?: string;
}

export interface GetGroupMetricsByReferrerRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    size?: number;
    unit_reference?: string;
}

export interface GetGroupMetricsByReferringNetworksRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    size?: number;
    unit_reference?: string;
}

export interface GetGroupPreferencesRequest {
    group_guid: string;
}

export interface GetGroupShortenCountsRequest {
    group_guid: string;
    unit: TimeUnit;
    units: number;
    unit_reference?: string;
}

export interface GetGroupTagsRequest {
    group_guid: string;
}

export interface GetGroupsRequest {
    organization_guid?: string;
}

export interface UpdateGroupRequest {
    group_guid: string;
    group_update: GroupUpdate;
}

export interface UpdateGroupPreferencesRequest {
    group_guid: string;
    group_preferences: GroupPreferences;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Returns details for a group.
     * Retrieve a Group
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Returns details for a group.
     * Retrieve a Group
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get number of clicks on bitlinks in a group
     * Get clicks by group
     */
    async getGroupClicksRaw(requestParameters: GetGroupClicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupClicks>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupClicks().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupClicks().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupClicks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/clicks`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupClicksFromJSON(jsonValue));
    }

    /**
     * get number of clicks on bitlinks in a group
     * Get clicks by group
     */
    async getGroupClicks(requestParameters: GetGroupClicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupClicks> {
        const response = await this.getGroupClicksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a group\'s current feature limit usage, optionally provide limit name(s) for usage on specific limit(s)
     * Get limit usage for a group
     */
    async getGroupFeatureUsageRaw(requestParameters: GetGroupFeatureUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupFeatureUsage>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupFeatureUsage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/feature_usage`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFeatureUsageFromJSON(jsonValue));
    }

    /**
     * Get a group\'s current feature limit usage, optionally provide limit name(s) for usage on specific limit(s)
     * Get limit usage for a group
     */
    async getGroupFeatureUsage(requestParameters: GetGroupFeatureUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupFeatureUsage> {
        const response = await this.getGroupFeatureUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a group\'s historical usage for specific limit(s) and date range. Refer to GET /v4/groups/{group_guid}/feature_usage endpoint response for available limit names.
     * Get historical usage for a group
     */
    async getGroupHistoricalUsageRaw(requestParameters: GetGroupHistoricalUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupHistoricalUsage>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupHistoricalUsage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['start_date'] != null) {
            queryParameters['start_date'] = requestParameters['start_date'];
        }

        if (requestParameters['end_date'] != null) {
            queryParameters['end_date'] = requestParameters['end_date'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/historical_usage`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupHistoricalUsageFromJSON(jsonValue));
    }

    /**
     * Get a group\'s historical usage for specific limit(s) and date range. Refer to GET /v4/groups/{group_guid}/feature_usage endpoint response for available limit names.
     * Get historical usage for a group
     */
    async getGroupHistoricalUsage(requestParameters: GetGroupHistoricalUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupHistoricalUsage> {
        const response = await this.getGroupHistoricalUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the geographic origins of click traffic by city for the specified group.
     * Get Click Metrics for a Group by City
     */
    async getGroupMetricsByCitiesRaw(requestParameters: GetGroupMetricsByCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityMetrics>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupMetricsByCities().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupMetricsByCities().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupMetricsByCities().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/cities`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityMetricsFromJSON(jsonValue));
    }

    /**
     * Returns the geographic origins of click traffic by city for the specified group.
     * Get Click Metrics for a Group by City
     */
    async getGroupMetricsByCities(requestParameters: GetGroupMetricsByCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityMetrics> {
        const response = await this.getGroupMetricsByCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the geographic origins of click traffic by country for the specified group.
     * Get Click Metrics for a Group by Country
     */
    async getGroupMetricsByCountriesRaw(requestParameters: GetGroupMetricsByCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClickMetrics>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupMetricsByCountries().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupMetricsByCountries().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupMetricsByCountries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/countries`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClickMetricsFromJSON(jsonValue));
    }

    /**
     * Returns the geographic origins of click traffic by country for the specified group.
     * Get Click Metrics for a Group by Country
     */
    async getGroupMetricsByCountries(requestParameters: GetGroupMetricsByCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClickMetrics> {
        const response = await this.getGroupMetricsByCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the device types generating click traffic to the specified group\'s links.
     * Get Click Metrics for a Group by Device Type
     */
    async getGroupMetricsByDevicesRaw(requestParameters: GetGroupMetricsByDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceMetrics>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupMetricsByDevices().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupMetricsByDevices().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupMetricsByDevices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/devices`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceMetricsFromJSON(jsonValue));
    }

    /**
     * Returns the device types generating click traffic to the specified group\'s links.
     * Get Click Metrics for a Group by Device Type
     */
    async getGroupMetricsByDevices(requestParameters: GetGroupMetricsByDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceMetrics> {
        const response = await this.getGroupMetricsByDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns metrics by referrer for the specified group\'s links.
     * Get Click Metrics for a Group by Referrer
     */
    async getGroupMetricsByReferrerRaw(requestParameters: GetGroupMetricsByReferrerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClickMetrics>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupMetricsByReferrer().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupMetricsByReferrer().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupMetricsByReferrer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/referrers`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClickMetricsFromJSON(jsonValue));
    }

    /**
     * Returns metrics by referrer for the specified group\'s links.
     * Get Click Metrics for a Group by Referrer
     */
    async getGroupMetricsByReferrer(requestParameters: GetGroupMetricsByReferrerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClickMetrics> {
        const response = await this.getGroupMetricsByReferrerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns metrics by referring networks for the specified group\'s links.
     * Get Click Metrics for a Group by Referring Networks
     */
    async getGroupMetricsByReferringNetworksRaw(requestParameters: GetGroupMetricsByReferringNetworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClickMetrics>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupMetricsByReferringNetworks().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupMetricsByReferringNetworks().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupMetricsByReferringNetworks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/referring_networks`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClickMetricsFromJSON(jsonValue));
    }

    /**
     * Returns metrics by referring networks for the specified group\'s links.
     * Get Click Metrics for a Group by Referring Networks
     */
    async getGroupMetricsByReferringNetworks(requestParameters: GetGroupMetricsByReferringNetworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClickMetrics> {
        const response = await this.getGroupMetricsByReferringNetworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns preferences for the specified group.
     * Retrieve Group Preferences
     */
    async getGroupPreferencesRaw(requestParameters: GetGroupPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupPreferences>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/preferences`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupPreferencesFromJSON(jsonValue));
    }

    /**
     * Returns preferences for the specified group.
     * Retrieve Group Preferences
     */
    async getGroupPreferences(requestParameters: GetGroupPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupPreferences> {
        const response = await this.getGroupPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all the shorten counts for a group.
     * Retrieve Group Shorten Counts
     */
    async getGroupShortenCountsRaw(requestParameters: GetGroupShortenCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Metrics>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupShortenCounts().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getGroupShortenCounts().'
            );
        }

        if (requestParameters['units'] == null) {
            throw new runtime.RequiredError(
                'units',
                'Required parameter "units" was null or undefined when calling getGroupShortenCounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['unit_reference'] != null) {
            queryParameters['unit_reference'] = requestParameters['unit_reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/shorten_counts`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsFromJSON(jsonValue));
    }

    /**
     * Returns all the shorten counts for a group.
     * Retrieve Group Shorten Counts
     */
    async getGroupShortenCounts(requestParameters: GetGroupShortenCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Metrics> {
        const response = await this.getGroupShortenCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the tags currently used in the specified group. Maximum 1000.
     * Retrieve Tags by Group
     */
    async getGroupTagsRaw(requestParameters: GetGroupTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tags>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling getGroupTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/tags`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagsFromJSON(jsonValue));
    }

    /**
     * Returns the tags currently used in the specified group. Maximum 1000.
     * Retrieve Tags by Group
     */
    async getGroupTags(requestParameters: GetGroupTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tags> {
        const response = await this.getGroupTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of groups in the organization.
     * Retrieve Groups
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>> {
        const queryParameters: any = {};

        if (requestParameters['organization_guid'] != null) {
            queryParameters['organization_guid'] = requestParameters['organization_guid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsFromJSON(jsonValue));
    }

    /**
     * Returns a list of groups in the organization.
     * Retrieve Groups
     */
    async getGroups(requestParameters: GetGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups> {
        const response = await this.getGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of a group.
     * Update a Group
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling updateGroup().'
            );
        }

        if (requestParameters['group_update'] == null) {
            throw new runtime.RequiredError(
                'group_update',
                'Required parameter "group_update" was null or undefined when calling updateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateToJSON(requestParameters['group_update']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Updates the details of a group.
     * Update a Group
     */
    async updateGroup(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.updateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates preferences for a group.
     * Update Group Preferences
     */
    async updateGroupPreferencesRaw(requestParameters: UpdateGroupPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupPreferences>> {
        if (requestParameters['group_guid'] == null) {
            throw new runtime.RequiredError(
                'group_guid',
                'Required parameter "group_guid" was null or undefined when calling updateGroupPreferences().'
            );
        }

        if (requestParameters['group_preferences'] == null) {
            throw new runtime.RequiredError(
                'group_preferences',
                'Required parameter "group_preferences" was null or undefined when calling updateGroupPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/groups/{group_guid}/preferences`;
        urlPath = urlPath.replace(`{${"group_guid"}}`, encodeURIComponent(String(requestParameters['group_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupPreferencesToJSON(requestParameters['group_preferences']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupPreferencesFromJSON(jsonValue));
    }

    /**
     * Updates preferences for a group.
     * Update Group Preferences
     */
    async updateGroupPreferences(requestParameters: UpdateGroupPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupPreferences> {
        const response = await this.updateGroupPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
