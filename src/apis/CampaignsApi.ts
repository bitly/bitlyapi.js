/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadGateway,
  BadRequest,
  Campaign,
  CampaignModify,
  Campaigns,
  Channel,
  ChannelModify,
  Channels,
  Forbidden,
  InternalError,
  MonthlyLimitExceeded,
  NotFound,
  TemporarilyUnavailable,
  UnprocessableEntity,
  UpgradeRequired,
} from '../models/index';
import {
    BadGatewayFromJSON,
    BadGatewayToJSON,
    BadRequestFromJSON,
    BadRequestToJSON,
    CampaignFromJSON,
    CampaignToJSON,
    CampaignModifyFromJSON,
    CampaignModifyToJSON,
    CampaignsFromJSON,
    CampaignsToJSON,
    ChannelFromJSON,
    ChannelToJSON,
    ChannelModifyFromJSON,
    ChannelModifyToJSON,
    ChannelsFromJSON,
    ChannelsToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalErrorFromJSON,
    InternalErrorToJSON,
    MonthlyLimitExceededFromJSON,
    MonthlyLimitExceededToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    TemporarilyUnavailableFromJSON,
    TemporarilyUnavailableToJSON,
    UnprocessableEntityFromJSON,
    UnprocessableEntityToJSON,
    UpgradeRequiredFromJSON,
    UpgradeRequiredToJSON,
} from '../models/index';

export interface CreateCampaignRequest {
    campaign_modify: CampaignModify;
}

export interface CreateChannelRequest {
    channel_modify: ChannelModify;
}

export interface GetCampaignRequest {
    campaign_guid: string;
}

export interface GetCampaignsRequest {
    group_guid?: string;
}

export interface GetChannelRequest {
    channel_guid: string;
}

export interface GetChannelsRequest {
    group_guid?: string;
    campaign_guid?: string;
}

export interface UpdateCampaignRequest {
    campaign_guid: string;
    campaign_modify: CampaignModify;
}

export interface UpdateChannelRequest {
    channel_guid: string;
    channel_modify: ChannelModify;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Creates a new campaign.
     * Create Campaign
     */
    async createCampaignRaw(requestParameters: CreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Campaign>> {
        if (requestParameters['campaign_modify'] == null) {
            throw new runtime.RequiredError(
                'campaign_modify',
                'Required parameter "campaign_modify" was null or undefined when calling createCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/campaigns`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignModifyToJSON(requestParameters['campaign_modify']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignFromJSON(jsonValue));
    }

    /**
     * Creates a new campaign.
     * Create Campaign
     */
    async createCampaign(requestParameters: CreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Campaign> {
        const response = await this.createCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new channel.
     * Create Channel
     */
    async createChannelRaw(requestParameters: CreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['channel_modify'] == null) {
            throw new runtime.RequiredError(
                'channel_modify',
                'Required parameter "channel_modify" was null or undefined when calling createChannel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/channels`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelModifyToJSON(requestParameters['channel_modify']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     * Creates a new channel.
     * Create Channel
     */
    async createChannel(requestParameters: CreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.createChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details for a campaign.
     * Retrieve a Campaign
     */
    async getCampaignRaw(requestParameters: GetCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Campaign>> {
        if (requestParameters['campaign_guid'] == null) {
            throw new runtime.RequiredError(
                'campaign_guid',
                'Required parameter "campaign_guid" was null or undefined when calling getCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/campaigns/{campaign_guid}`;
        urlPath = urlPath.replace(`{${"campaign_guid"}}`, encodeURIComponent(String(requestParameters['campaign_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignFromJSON(jsonValue));
    }

    /**
     * Returns details for a campaign.
     * Retrieve a Campaign
     */
    async getCampaign(requestParameters: GetCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Campaign> {
        const response = await this.getCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the campaigns for the current authenticated user.
     * Retrieve Campaigns
     */
    async getCampaignsRaw(requestParameters: GetCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Campaigns>> {
        const queryParameters: any = {};

        if (requestParameters['group_guid'] != null) {
            queryParameters['group_guid'] = requestParameters['group_guid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/campaigns`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsFromJSON(jsonValue));
    }

    /**
     * Returns the campaigns for the current authenticated user.
     * Retrieve Campaigns
     */
    async getCampaigns(requestParameters: GetCampaignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Campaigns> {
        const response = await this.getCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a channel\'s details.
     * Get a Channel
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['channel_guid'] == null) {
            throw new runtime.RequiredError(
                'channel_guid',
                'Required parameter "channel_guid" was null or undefined when calling getChannel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/channels/{channel_guid}`;
        urlPath = urlPath.replace(`{${"channel_guid"}}`, encodeURIComponent(String(requestParameters['channel_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     * Returns a channel\'s details.
     * Get a Channel
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the channels available to a user.
     * Retrieve Channels
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channels>> {
        const queryParameters: any = {};

        if (requestParameters['group_guid'] != null) {
            queryParameters['group_guid'] = requestParameters['group_guid'];
        }

        if (requestParameters['campaign_guid'] != null) {
            queryParameters['campaign_guid'] = requestParameters['campaign_guid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/channels`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelsFromJSON(jsonValue));
    }

    /**
     * Returns the channels available to a user.
     * Retrieve Channels
     */
    async getChannels(requestParameters: GetChannelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channels> {
        const response = await this.getChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a campaign\'s details.
     * Update Campaign
     */
    async updateCampaignRaw(requestParameters: UpdateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Campaign>> {
        if (requestParameters['campaign_guid'] == null) {
            throw new runtime.RequiredError(
                'campaign_guid',
                'Required parameter "campaign_guid" was null or undefined when calling updateCampaign().'
            );
        }

        if (requestParameters['campaign_modify'] == null) {
            throw new runtime.RequiredError(
                'campaign_modify',
                'Required parameter "campaign_modify" was null or undefined when calling updateCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/campaigns/{campaign_guid}`;
        urlPath = urlPath.replace(`{${"campaign_guid"}}`, encodeURIComponent(String(requestParameters['campaign_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignModifyToJSON(requestParameters['campaign_modify']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignFromJSON(jsonValue));
    }

    /**
     * Updates a campaign\'s details.
     * Update Campaign
     */
    async updateCampaign(requestParameters: UpdateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Campaign> {
        const response = await this.updateCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing channel.
     * Update a Channel
     */
    async updateChannelRaw(requestParameters: UpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['channel_guid'] == null) {
            throw new runtime.RequiredError(
                'channel_guid',
                'Required parameter "channel_guid" was null or undefined when calling updateChannel().'
            );
        }

        if (requestParameters['channel_modify'] == null) {
            throw new runtime.RequiredError(
                'channel_modify',
                'Required parameter "channel_modify" was null or undefined when calling updateChannel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/channels/{channel_guid}`;
        urlPath = urlPath.replace(`{${"channel_guid"}}`, encodeURIComponent(String(requestParameters['channel_guid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelModifyToJSON(requestParameters['channel_modify']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     * Updates an existing channel.
     * Update a Channel
     */
    async updateChannel(requestParameters: UpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.updateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
