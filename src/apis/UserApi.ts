/* tslint:disable */
/* eslint-disable */
/**
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  Forbidden,
  InternalError,
  NotFound,
  PlatformLimits,
  TemporarilyUnavailable,
  UnprocessableEntity,
  User,
  UserUpdate,
} from '../models/index';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalErrorFromJSON,
    InternalErrorToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    PlatformLimitsFromJSON,
    PlatformLimitsToJSON,
    TemporarilyUnavailableFromJSON,
    TemporarilyUnavailableToJSON,
    UnprocessableEntityFromJSON,
    UnprocessableEntityToJSON,
    UserFromJSON,
    UserToJSON,
    UserUpdateFromJSON,
    UserUpdateToJSON,
} from '../models/index';

export interface GetPlatformLimitsRequest {
    path?: string;
}

export interface UpdateUserRequest {
    user_update: UserUpdate;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Fetch all platform limits and counts available for an organization
     * Get Platform Limits
     */
    async getPlatformLimitsRaw(requestParameters: GetPlatformLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformLimits>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/user/platform_limits`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformLimitsFromJSON(jsonValue));
    }

    /**
     * Fetch all platform limits and counts available for an organization
     * Get Platform Limits
     */
    async getPlatformLimits(requestParameters: GetPlatformLimitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformLimits> {
        const response = await this.getPlatformLimitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information for the current authenticated user.
     * Retrieve a User
     */
    async getUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Returns information for the current authenticated user.
     * Retrieve a User
     */
    async getUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update fields in the user
     * Update a User
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['user_update'] == null) {
            throw new runtime.RequiredError(
                'user_update',
                'Required parameter "user_update" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateToJSON(requestParameters['user_update']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update fields in the user
     * Update a User
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
